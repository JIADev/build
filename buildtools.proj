<?xml version="1.0"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <Import Project="forwardmerge.targets" Condition="Exists('forwardmerge.targets')" />
  <Import Project="dependencymerge.targets" Condition="Exists('dependencymerge.targets')"/>
  <PropertyGroup>
    <WorkingDirectory>$([MSBuild]::ValueOrDefault(`$(WorkingDirectory)`, 'c:\dev\repos'))</WorkingDirectory>
    <ActiveRepo>$(WorkingDirectory)\active</ActiveRepo>
    <ProdRepo>$(WorkingDirectory)\prod</ProdRepo>
    <InitSourceRepo>$([MSBuild]::ValueOrDefault(`$(InitSourceRepo)`, 'prod')</InitSourceRepo>
    <BuildRepo>$(WorkingDirectory)\build$(InitSourceRepo)Repo</BuildRepo>
    <TagRepo>$(WorkingDirectory)\tag$(InitSourceRepo)Repo</TagRepo>
    <SourceRepo>$([MSBuild]::ValueOrDefault(`$(SourceRepo)`, '$(ActiveRepo)'))</SourceRepo>
    <TrashBranch>$([MSBuild]::ValueOrDefault(`$(TrashBranch)`, 'trash'))</TrashBranch>
    <BuildBranchName>$(CustomerNumber)_Build_$([System.DateTime]::Now.ToString(`yyyy.MM.dd_HHmmss`))</BuildBranchName>
    <BuildToolsDirectory>$(MSBuildProjectDirectory)</BuildToolsDirectory>
  </PropertyGroup>
  
  <Target Name="Test">
    <Message Text="$(MSBuildStartupDirectory)" />
  </Target>
  <Target Name="GetTipChangeset" Outputs="$(Changeset)">
    <Exec WorkingDirectory="$(BuildRepo)" Command="hg tip &gt; $(BuildRepo)\tip.txt" />
    <ReadLinesFromFile File="$(BuildRepo)\tip.txt">
      <Output TaskParameter="Lines" PropertyName="Tip" />
    </ReadLinesFromFile>
    <PropertyGroup>
      <ChangesetLine>$([System.Text.RegularExpressions.Regex]::Match(`$(Tip)`, 'changeset:[^;]*').Value)</ChangesetLine>
      <ChangesetPosition>$([MSBuild]::ValueOrDefault(`$(ChangesetLine)`, ':').LastIndexOf(':'))</ChangesetPosition>
      <Changeset>$([MSBuild]::ValueOrDefault(`$(ChangesetLine)`, '').Substring($(ChangesetPosition)).Trim(':'))</Changeset>
    </PropertyGroup>
  </Target>
  
  <Target Name="GetLastModifiedArtifactFile" Outputs="$(LastModified)" DependsOnTargets="BuildGetLastModifiedFile">
    <Exec WorkingDirectory="$(RepoDirectory)" Command="$(RepoDirectory)\GetLastModifiedFile.exe $(CCNetArtifactDirectory)\buildlogs &gt; $(RepoDirectory)\LastModifiedFile.txt" />
    <ReadLinesFromFile File="$(RepoDirectory)\LastModifiedFile.txt">
      <Output TaskParameter="Lines" PropertyName="Files" />
    </ReadLinesFromFile>
    <PropertyGroup>
      <LastModified>$(Files)</LastModified>
    </PropertyGroup>
  </Target>
  
  <Target Name="GetMergedChangesets" DependsOnTargets="BuildUpdateStyleSheet">
    <Error Text="Missing RepoDirectory" Condition="'$(RepoDirectory)' == ''" />
    <Error Text="Missing OriginalChangeset" Condition="'$(OriginalChangeset)' == ''" />
    <Error Text="Missing NewChangeset" Condition="'$(NewChangeset)' == ''" />
    <PropertyGroup>
      <UpdateToChangeset>$([MSBuild]::ValueOrDefault(`$(UpdateToChangeset)`, '$(NewChangeset)'))</UpdateToChangeset>
    </PropertyGroup>
    <Exec WorkingDirectory="$(RepoDirectory)" Command="hg log --rev &quot;ancestors('$(NewChangeset)') and !ancestors('$(OriginalChangeset)') and !merge() and !keyword('@build')&quot; --verbose --style=xml > $(RepoDirectory)\ChangesetLog.xml" />
	<Exec WorkingDirectory="$(RepoDirectory)" Command="$(RepoDirectory)\UpdateStyleSheet.exe" /> 
 </Target>
  
  <Target Name="MergeChangesetLog" DependsOnTargets="BuildMergeLog">
    <Error Text="Missing CCNetArtifactDirectory" Condition="'$(CCNetArtifactDirectory)' == ''" />
    <Error Text="Missing RepoDirectory" Condition="'$(RepoDirectory)' == ''" />
    <CallTarget Targets="GetLastModifiedArtifactFile">
      <Output TaskParameter="TargetOutputs" PropertyName="CCNetLogFile" />
    </CallTarget>
    <Exec WorkingDirectory="$(RepoDirectory)" Command="$(RepoDirectory)\MergeLog.exe $(RepoDirectory)\ChangesetLog.xml $(CCNetLogFile)" Condition="Exists('$(RepoDirectory)\ChangesetLog.xml')" />
  </Target>
  
  <Target Name="CleanProjectFiles" DependsOnTargets="BuildCleanProjectFiles">
    <PropertyGroup>
      <TargetRepo>$([MSBuild]::ValueOrDefault(`$(TargetRepo)`, '$(MSBuildStartupDirectory)'))</TargetRepo>
    </PropertyGroup>
    <Exec WorkingDirectory="$(TargetRepo)" Command="$(BuildToolsDirectory)\Code\CleanProjectFiles.exe" />
  </Target>

  <Target Name="ReadChangedFiles" DependsOnTargets="BuildChangedFiles">
    <Error Text="Missing ChangesetLogFile" Condition="'$(ChangesetLogFile)' == ''" />
    <Error Text="Missing OutputFile" Condition="'$(OutputFile)' == ''" />
    <Error Text="Missing RepoDirectory" Condition="'$(RepoDirectory)' == ''" />
    <Exec WorkingDirectory="$(RepoDirectory)" Command="$(RepoDirectory)\ChangedFiles.exe $(RepoDirectory)\ChangesetLog.xml $(RepoDirectory)\ChangedFiles.txt" />
  </Target>
  
  <Target Name="DeleteIfEmpty" DependsOnTargets="BuildDeleteIfEmpty">
    <Error Text="Missing File" Condition="'$(File)' == ''" />
    <Error Text="Missing RepoDirectory" Condition="'$(RepoDirectory)' == ''" />
    <Exec WorkingDirectory="$(RepoDirectory)" Command="$(RepoDirectory)\DeleteIfEmpty.exe $(RepoDirectory)\$(File)" />
  </Target>
  
  <Target Name="CopyFilesIfDifferent" DependsOnTargets="BuildCopyDiffFiles">
    <Error Text="Missing SourceDir" Condition="'$(SourceDir)' == ''" />
    <Error Text="Missing TargetDir" Condition="'$(TargetDir)' == ''" />
    <Exec Command='$(MSBuildStartupDirectory)\CopyDiffFiles.exe "$(SourceDir)" "$(TargetDir)"' />
  </Target>
  
  <Target Name="Protect" DependsOnTargets="BuildProtect">
    <Error Text="Missing Customer" Condition="'$(Customer)' == ''" />
    <Error Text="Missing Directory" Condition="'$(Directory)' == ''" />
    <Exec WorkingDirectory="$(Directory)" Command="$(MSBuildStartupDirectory)\Protect.exe $(Directory)\RELEASE-UNPROTECTED $(Customer)" />
  </Target>
  
  <Target Name="AssemblePackage" DependsOnTargets="BuildAssemblePackage">
    <Error Text="Missing Customer" Condition="'$(Customer)' == ''" />
    <Error Text="Missing HgSourceDir" Condition="'$(HgSourceDir)' == ''" />
    <Exec WorkingDirectory="$(Directory)" Command="$(MSBuildStartupDirectory)\AssemblePackage.exe $(Customer) $(MSBuildStartupDirectory) $(HgSourceDir) $(MSBuildStartupDirectory)\RELEASE-UNPROTECTED" />
  </Target>
  
  <Target Name="CreateZip" DependsOnTargets="BuildZip">
    <Error Text="Missing Customer" Condition="'$(Customer)' == ''" />
    <Error Text="Missing j6Version" Condition="'$(j6Version)' == ''" />
    <Error Text="Missing BuildTime" Condition="'$(BuildTime)' == ''" />
    <Error Text="Missing ZipDirectory" Condition="'$(ZipDirectory)' == ''" />
    <PropertyGroup>
      <ZipFile>RELEASE-$(Customer)-$(j6Version).0-$([System.DateTime]::Parse(`$(BuildTime)`).ToString(`yyyyMMddHHmmss`)).zip</ZipFile>
      <UnprotectedZipFile>RELEASE-$(Customer)-$(j6Version).0-$([System.DateTime]::Parse(`$(BuildTime)`).ToString(`yyyyMMddHHmmss`))-UNPROTECTED.zip</UnprotectedZipFile>
    </PropertyGroup>
    
    <Exec WorkingDirectory="$(MSBuildStartupDirectory)" Command="$(MSBuildStartupDirectory)\Zip.exe $(ZipDirectory) $(ZipFile)" Condition="Exists('$(ZipDirectory)')" /> 
    <Exec WorkingDirectory="$(MSBuildStartupDirectory)" Command="$(MSBuildStartupDirectory)\Zip.exe $(ZipDirectory)-UNPROTECTED $(UnprotectedZipFile)" Condition="Exists('$(ZipDirectory)-UNPROTECTED')" /> 
  </Target>
  
  <Target Name="PublishChangesetLog" >
    <Error Text="Missing Customer" Condition="'$(Customer)' == ''" />
    <Error Text="Missing j6Version" Condition="'$(j6Version)' == ''" />
    <Error Text="Missing BuildTime" Condition="'$(BuildTime)' == ''" />
    <Error Text="Missing TargetDir" Condition="'$(TargetDir)' == ''" />
    <Error Text="Missing SourceFile" Condition="'$(SourceFile)' == ''" />
    <PropertyGroup>
      <DestFile>RELEASE-$(Customer)-$(j6Version).0-$([System.DateTime]::Parse(`$(BuildTime)`).ToString(`yyyyMMddHHmmss`)).xml</DestFile>
    </PropertyGroup>
    <ItemGroup>
      <SourceFiles Include="$(SourceFile)" />
    </ItemGroup>
    <Message Text="Copying @(SourceFiles)" />
    <Copy SourceFiles="@(SourceFiles)" DestinationFiles="@(SourceFiles->'$(TargetDir)\$(DestFile)')" /> 
  </Target>
  
  <Target Name="UnZip" DependsOnTargets="BuildUnZip">
    <Error Text="Missing ZipFile" Condition="'$(ZipFile)' == ''" />
    <Error Text="Missing TargetDir" Condition="'$(TargetDir)' == ''" />
    <Exec WorkingDirectory="$(MSBuildStartupDirectory)" Command='$(MSBuildStartupDirectory)\UnZip.exe "$(ZipFile)" "$(TargetDir)"' /> 
  </Target>
  
  <Target Name="CleanJunctions" DependsOnTargets="BuildPurgeJunctionsExe">
    <Exec WorkingDirectory="$(MSBuildStartupDirectory)" Command="$(BuildToolsDirectory)\Code\PurgeJunctions.exe" />
  </Target>
  
  <Target Name="CleanEmptyDirectories" DependsOnTargets="BuildPurgeEmptyDirectoriesExe">
    <Exec WorkingDirectory="$(MSBuildStartupDirectory)" Command="$(BuildToolsDirectory)\Code\PurgeEmptyDirectories.exe" />
  </Target>
  
  <Target Name="RevertAll" DependsOnTargets="BuildRevertAllExe">
    <PropertyGroup>
      <TargetRepo>$([MSBuild]::ValueOrDefault(`$(TargetRepo)`, '$(MSBuildStartupDirectory)'))</TargetRepo>
    </PropertyGroup>
    <Exec WorkingDirectory="$(TargetRepo)" Command="$(BuildToolsDirectory)\Code\RevertAll.exe" />
  </Target>
  
  <Target Name="BuildUpdateStyleSheet">
    <Csc Sources="$(BuildToolsDirectory)\Code\UpdateStyleSheet.cs" OutputAssembly="$(RepoDirectory)\UpdateStyleSheet.exe" Condition="!Exists('$(RepoDirectory)\UpdateStyleSheet.exe')" />
  </Target>
  
  <Target Name="BuildExtractChangesets">
    <Csc Sources="$(BuildToolsDirectory)\Code\ExtractChangesets.cs;$(BuildToolsDirectory)\Code\LogEntry.cs;$(BuildToolsDirectory)\Code\RunProcess.cs" OutputAssembly="$(RepoDirectory)\ExtractChangesets.exe" Condition="!Exists('$(RepoDirectory)\ExtractChangesets.exe')" />
  </Target>
  
  <Target Name="BuildDeleteIfEmpty">
    <Csc Sources="$(BuildToolsDirectory)\Code\DeleteIfEmpty.cs" OutputAssembly="$(RepoDirectory)\DeleteifEmpty.exe" Condition="!Exists('$(RepoDirectory)\DeleteIfEmpty.exe')" />
  </Target>
  
  <Target Name="BuildMergeLog">
    <Csc Sources="$(BuildToolsDirectory)\Code\MergeLog.cs;$(BuildToolsDirectory)\Code\LogEntry.cs" OutputAssembly="$(RepoDirectory)\MergeLog.exe" />
  </Target>

  <Target Name="BuildCleanProjectFiles">
    <Csc Sources="$(BuildToolsDirectory)\Code\CleanProjectFiles.cs;$(BuildToolsDirectory)\Code\RunProcess.cs" OutputAssembly="$(BuildToolsDirectory)\Code\CleanProjectFiles.exe" />
  </Target>
  
  <Target Name="BuildChangedFiles">
    <Csc Sources="$(BuildToolsDirectory)\Code\ChangedFiles.cs;$(BuildToolsDirectory)\Code\LogEntry.cs" OutputAssembly="$(RepoDirectory)\ChangedFiles.exe" Condition="!Exists('$(RepoDirectory)\ChangedFiles.exe')" />
  </Target>
  
  <Target Name="BuildZip">
    <ItemGroup>
      <ReferenceFiles Include="$(BuildToolsDirectory)\lib\Ionic.Zip.dll" />
    </ItemGroup>
    <Copy SourceFiles="@(ReferenceFiles)" DestinationFolder="$(MSBuildStartupDirectory)" />
    <Csc Sources="$(BuildToolsDirectory)\Code\Zip.cs" OutputAssembly="$(MSBuildStartupDirectory)\Zip.exe" References="@(ReferenceFiles)" />
  </Target>
  
  <Target Name="BuildUnZip">
    <ItemGroup>
      <ReferenceFiles Include="$(BuildToolsDirectory)\lib\Ionic.Zip.dll" />
    </ItemGroup>
    <Copy SourceFiles="@(ReferenceFiles)" DestinationFolder="$(MSBuildStartupDirectory)" />
    <Csc Sources="$(BuildToolsDirectory)\Code\UnZip.cs" OutputAssembly="$(MSBuildStartupDirectory)\UnZip.exe" References="@(ReferenceFiles)" />
  </Target>
  
  <Target Name="BuildProtect">
    <ItemGroup>
      <ReferenceFiles Include="$(BuildToolsDirectory)\lib\Ionic.Zip.dll" />
    </ItemGroup>
    <Copy SourceFiles="@(ReferenceFiles)" DestinationFolder="$(MSBuildStartupDirectory)" />
    <Csc Sources="$(BuildToolsDirectory)\Code\Protect.cs;$(BuildToolsDirectory)\Code\RunProcess.cs" OutputAssembly="$(MSBuildStartupDirectory)\Protect.exe" References="@(ReferenceFiles)" />
  </Target>
  
  <Target Name="BuildCopyDiffFiles">
    <Csc Sources="$(BuildToolsDirectory)\Code\CopyDiffFiles.cs" OutputAssembly="$(MSBuildStartupDirectory)\CopyDiffFiles.exe" />
  </Target>
  
  <Target Name="BuildAssemblePackage">
    <Csc Sources="$(BuildToolsDirectory)\Code\AssemblePackage.cs;$(BuildToolsDirectory)\Code\RunProcess.cs" OutputAssembly="$(MSBuildStartupDirectory)\AssemblePackage.exe" />
  </Target>
  
  <Target Name="BuildGetLastModifiedFile">
    <Csc Sources="$(BuildToolsDirectory)\Code\GetLastModifiedFile.cs" OutputAssembly="$(RepoDirectory)\GetLastModifiedFile.exe" />
  </Target>
  
  <Target Name="BuildPurgeJunctionsExe">
    <Csc Sources="$(BuildToolsDirectory)\Code\PurgeJunctions.cs" OutputAssembly="$(BuildToolsDirectory)\Code\PurgeJunctions.exe" />
  </Target>
  
  <Target Name="BuildPurgeEmptyDirectoriesExe">
    <Csc Sources="$(BuildToolsDirectory)\Code\PurgeEmptyDirectories.cs" OutputAssembly="$(BuildToolsDirectory)\Code\PurgeEmptyDirectories.exe" />
  </Target>
  
  <Target Name="BuildRevertAllExe" Condition="!Exists('$(BuildToolsDirectory)\Code\RevertAll.exe')">
    <Csc Sources="$(BuildToolsDirectory)\Code\RevertAll.cs;$(BuildToolsDirectory)\Code\RunProcess.cs" OutputAssembly="$(BuildToolsDirectory)\Code\RevertAll.exe" />
  </Target>
  
  <Target Name="BuildFindJunctionsExe">
    <Csc Sources="$(BuildToolsDirectory)\Code\FindJunctions.cs" OutputAssembly="$(BuildToolsDirectory)\FindJunctions.exe" />
  </Target>
  
  <Target Name="BuildResetXmlEncodingExe">
    <Csc Sources="$(BuildToolsDirectory)\Code\ResetXmlEncoding.cs;$(BuildToolsDirectory)\Code\FileEnumerator.cs" OutputAssembly="$(BuildToolsDirectory)\ResetXmlEncoding.exe" />
  </Target>
  
  <Target Name="ShowMessage">
    <Message Text="$(MyMessage)" />
  </Target>
  
  <Target Name="MarkBuildDeployed" DependsOnTargets="InitBuildRepo">
    <Exec WorkingDirectory="$(TagRepo)" Command='hg tag -r $(ReleaseNumber) $(CustomerNumber)_$(Environment) $(CustomerNumber)_$(Environment)_$(DeployedDate) -f -m "Deployed $(ReleaseNumber) to $(CustomerNumber) $(Environment) at $(DeployedDate)"' />
    <Exec WorkingDirectory="$(TagRepo)" Command="hg push" />
    <Exec WorkingDirectory="$(BuildRepo)" Command="hg push -b tags" />
  </Target>
  
  <Target Name="CloseBranches">
    <Error Text="Missing /p:BuildRepo" Condition="'$(BuildRepo)' == ''" />
    <Error Text="Missing /p:Branches=&quot;&lt;Redmine;Branch;List&gt;&quot;" Condition="'$(Branches)' == ''" />
    <ItemGroup>
      <BranchesToClose Include="$(Branches)" />
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="CloseBranch" Properties="SourceRepo=$(BuildRepo);SourceBranch=%(BranchesToClose.Identity)" />
  </Target>
  
  <Target Name="WriteBranchList">
    <Error Text="Missing /p:SourceRepo" Condition="'$(SourceRepo)' == ''" />
    <Exec WorkingDirectory="$(SourceRepo)" Command="hg branches -c > $(SourceRepo)\branches.txt" IgnoreExitCode="true" />
  </Target>
  
  <Target Name="FindClosed" DependsOnTargets="WriteBranchList;BuildFindClosedExe">
    <Exec WorkingDirectory="$(SourceRepo)" Command="$(BuildToolsDirectory)\Code\FindClosed.exe $(SourceBranch) $(SourceRepo)\branches.txt $(SourceRepo)\closerevision.txt" />
    <Exec WorkingDirectory="$(SourceRepo)" Command="$(BuildToolsDirectory)\Code\FindClosed.exe $(SourceBranch)_pub $(SourceRepo)\branches.txt closepubrevision.txt" />
  </Target>
  
  <Target Name="BuildFindClosedExe">
    <Csc Sources="$(BuildToolsDirectory)\Code\FindClosed.cs" OutputAssembly="$(BuildToolsDirectory)\Code\FindClosed.exe" Condition="!Exists('$(BuildToolsDirectory)\Code\FindClosed.exe')" />
  </Target>
  
  <Target Name="CloseBranch">
    <Message Text="SourceBranch=$(SourceBranch)" />
    <Message Text="SourceRepo=$(SourceRepo)" />
    <Error Text="Missing /p:SourceBranch=&quot;SourceBranch&quot;" Condition="'$(SourceBranch)' == ''" />
    <Error Text="Missing /p:SourceRepo=&quot;SourceRepo&quot;" Condition="'$(SourceRepo)' == ''" />
    <CallTarget Targets="FindClosed" Condition="'$(Force)' != 'true'" />
    
    <Exec WorkingDirectory="$(SourceRepo)" Command="hg up $(SourceBranch) -C" Condition="Exists('$(SourceRepo)\closerevision.txt') OR '$(Force)' == 'true'" />
    <Exec WorkingDirectory="$(SourceRepo)" Command="hg ci -m &quot;Closing $(SourceBranch)&quot; --close-branch" Condition="Exists('$(SourceRepo)\closerevision.txt') OR '$(Force)' == 'true'" />
  </Target>
  
  <Target Name="CreateBuild" DependsOnTargets="InitBuildRepo">
    <Error Text="Missing /p:CustomerNumber=&lt;Number&gt;" Condition="'$(CustomerNumber)' == ''" />
    <Error Text="Missing /p:Branches=&quot;&lt;Redmine;Branch;List&gt;&quot;" Condition="'$(Branches)' == ''" />
    <PropertyGroup>
      <CustomerPrefix Condition="'$(SuppressPrefix)' != 'true'">$([MSBuild]::ValueOrDefault(`$(CustomerPrefix)`, '$(CustomerNumber)_'))</CustomerPrefix>
      <BuildTag>$([MSBuild]::ValueOrDefault(`$(BuildTag)`, 'BLD'))</BuildTag>
      <BaseTag>$([MSBuild]::ValueOrDefault(`$(BaseTag)`, 'PRD'))</BaseTag>
      <DatedBuildTag>$(BuildTag)_$([System.DateTime]::Now.ToString(`yyyy.MM.dd_HHmmss`))</DatedBuildTag>
      <Interactive>$([MSBuild]::ValueOrDefault(`$(Interactive)`, 'true'))</Interactive>
      <TagsBranch>$([MSBuild]::ValueOrDefault(`$(TagsBranch)`, 'tags'))</TagsBranch>
    </PropertyGroup>
    <ItemGroup>
      <BranchesToMerge Include="$(Branches)" />
    </ItemGroup>
    <Exec WorkingDirectory="$(BuildRepo)" Command="hg up $(CustomerPrefix)$(BaseTag) -C" />
    <Exec WorkingDirectory="$(BuildRepo)" Command="hg branch $(BuildBranchName)" />
    <Exec WorkingDirectory="$(BuildRepo)" Command='hg ci -m "Creating build branch @ignore @build"' />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="MergeBranches" Properties="SourceRepo=$(BuildRepo);SourceBranchPrefix=$(CustomerPrefix);SourceBranch=%(BranchesToMerge.Identity);TargetBranch=$(BuildBranchName);DoMerge=true;DoCommit=true;DoPush=false" />
    <Exec WorkingDirectory="$(BuildRepo)" Command='hg ci -m "Closing $(BuildBranchName) @ignore @build" --close-branch' />
    <CallTarget Targets="GetTipChangeset">
      <Output TaskParameter="TargetOutputs" PropertyName="Changeset" />
    </CallTarget>
    <Message Text="Changeset = $(Changeset)" />
    <Message Text="Working directory = $(TagRepo)" />
    <Exec WorkingDirectory="$(TagRepo)" Command="hg pull" />
    <Exec WorkingDirectory="$(TagRepo)" Command="hg up $(TagsBranch) -C" />
    <Exec WorkingDirectory="$(TagRepo)" Command='hg tag -f -r $(Changeset) $(CustomerPrefix)$(BuildTag) $(CustomerPrefix)$(DatedBuildTag) -m "Triggering build for $(CustomerPrefix)$(BuildTag)"' />
    <Exec WorkingDirectory="$(TagRepo)" Command="hg push" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="MergeBranches" Properties="SourceRepo=$(BuildRepo);SourceBranchPrefix=$(CustomerPrefix);SourceBranch=$(BuildTag);TargetBranch=$(TrashBranch);ToolArgs=internal:other;ExtraArgs=--noninteractive;DoMerge=true;DoCommit=true;DoPush=false" />
    <Exec WorkingDirectory="$(BuildRepo)" Command='"c:\Program Files\TortoiseHg\thgw.exe"' Condition="'$(Interactive)' == 'true'"/>
  </Target>
  <Target Name="Trash" DependsOnTargets="InitRepos;CloseBranch">
    <Error Text="Missing SourceBranch" Condition="'$(SourceBranch)' == ''" />
    <Error Text="Missing SourceRepo" Condition="'$(SourceRepo)' == ''" />
    <Error Text="Missing TrashBranch" Condition="'$(TrashBranch)' == ''" />
    <Message Text="SourceRepo=$(SourceRepo)" />
    <Exec WorkingDirectory="$(SourceRepo)" Command="hg up $(TrashBranch)" />
    <Exec WorkingDirectory="$(SourceRepo)" Command="hg merge $(SourceBranch) --tool=internal:other --noninteractive" />
    <Exec WorkingDirectory="$(SourceRepo)" Command="hg ci -m &quot;Trashing $(SourceBranch)&quot;" />
  </Target>
  <Target Name="UpdateReqs" DependsOnTargets="InitRepos">
    <Error Text="Missing CustomerNumber" Condition="'$(CustomerNumber)' == ''" />
    <ItemGroup>
      <BranchesToPublish Include="$(Branches)" />
    </ItemGroup>
    <Message Text="ActiveRepo=$(ActiveRepo)" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="PublishReq" Properties="TargetRepo=$(ActiveRepo);Source=$(CustomerNumber)_%(BranchesToPublish.Identity)" />
  </Target>
  
  <Target Name="InitRepos" DependsOnTargets="InitActiveRepo">
  </Target>
  
  <Target Name="InitBuildRepo" Condition="'$(SkipInit)' != 'true'">
    <Error Text="Missing InitSourceRepo" Condition="'$(InitSourceRepo)' == ''" />
    <Message Text="BuildRepo = $(BuildRepo)" />
    <MakeDir Directories="$(WorkingDirectory)" />
    <Exec WorkingDirectory="$(WorkingDirectory)" Command="hg clone repos://$(InitSourceRepo) $(BuildRepo)" Condition="!Exists('$(BuildRepo)')" />
    <Message Text="WorkingDirectory = $(BuildRepo)" />
    <Exec WorkingDirectory="$(BuildRepo)" Command="hg pull" />
    <Message Text="WorkingDirectory = $(WorkingDirectory)" />
    <Exec WorkingDirectory="$(WorkingDirectory)" Command="hg clone $(BuildRepo) $(TagRepo)" Condition="!Exists('$(TagRepo)')" />
    <Message Text="WorkingDirectory = $(TagRepo)" />
    <Exec WorkingDirectory="$(TagRepo)" Command="hg pull" />
  </Target>
  
  <Target Name="InitActiveRepo" Condition="'$(SkipInit)' != 'true'">
    <MakeDir Directories="$(WorkingDirectory)" />
    <Exec WorkingDirectory="$(WorkingDirectory)" Command="hg clone repos://active $(ActiveRepo)" Condition="!Exists('$(ActiveRepo)')" />
    <Message Text="WorkingDirectory = $(ActiveRepo)" />
    <Exec WorkingDirectory="$(ActiveRepo)" Command="hg pull" />
  </Target>
  
  <Target Name="InitRepo">
    <MakeDir Directories="$(WorkingDirectory)" Condition="!Exists('$(TargetRepo)')" />
    <Exec WorkingDirectory="$(WorkingDirectory)" Command = "hg init $(TargetRepo)" Condition="!Exists('$(TargetRepo)')" />
    <CallTarget Targets="RevertAll" />
  </Target>
  
  <Target Name="MergeBranchesIfChanged">
    <PropertyGroup>
      <TargetRepo>$([MSBuild]::ValueOrDefault(`$(TargetRepo)`, '$(SourceRepo)'))</TargetRepo>
      <Publish>$([MSBuild]::ValueOrDefault(`$(Publish)`, 'false'))</Publish>
      <UpdateBackToReqBranch>$([MSBuild]::ValueOrDefault(`$(UpdateBackToReqBranch)`, 'true'))</UpdateBackToReqBranch>
    </PropertyGroup>
    <Message Text="WorkingDirectory = $(TargetRepo) Source=$(SourceBranch) Target=$(TargetBranch)" />
    <Exec Command="hg init $(TargetRepo)" Condition="!Exists('$(TargetRepo)')" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg pull $(SourceRepo)" Condition="'$(SourceRepo)' != '$(TargetRepo)'" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="GetMergedChangesets" Properties="RepoDirectory=$(TargetRepo);OriginalChangeset=$(TargetBranch);UpdateToChangeset=$(TargetBranch);NewChangeset=$(SourceBranchPrefix)$(SourceBranch)" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="ReadChangedFiles" Properties="RepoDirectory=$(TargetRepo);ChangesetLogFile=$(TargetRepo)\ChangesetLog.xml;OutputFile=$(TargetRepo)\ChangedFiles.txt" />
    <MSbuild Projects="$(MSBuildProjectFullPath)" Targets="MergeBranches" Properties="UpdateBackToReqBranch=$(UpdateBackToReqBranch);Publish=$(Publish);TargetRepo=$(TargetRepo);SourceBranch=$(SourceBranch);SourceBranchPrefix=$(SourceBranchPrefix);TargetBranch=$(TargetBranch);Preview=$(Preview);DoMerge=$(DoMerge);DoCommit=$(DoCommit);DoPush=$(DoPush)" Condition="Exists('$(TargetRepo)\ChangedFiles.txt')" />
  </Target>
  
  <Target Name="MergeBranches">
    <PropertyGroup>
      <TargetRepo>$([MSBuild]::ValueOrDefault(`$(TargetRepo)`, '$(SourceRepo)'))</TargetRepo>
      <CleanFlag>$([MSBuild]::ValueOrDefault(`$(CleanFlag)`, ' -C'))</CleanFlag>
      <InternalMerge>$([MSBuild]::ValueOrDefault(`$(InternalMerge)`, 'true'))</InternalMerge>
      <Publish>$([MSBuild]::ValueOrDefault(`$(Publish)`, 'false'))</Publish>
      <ToolArgs>$([MSBuild]::ValueOrDefault(`$(ToolArgs)`, 'internal:merge'))</ToolArgs>
      <UpdateBackToReqBranch>$([MSBuild]::ValueOrDefault(`$(UpdateBackToReqBranch)`, 'true'))</UpdateBackToReqBranch>
    </PropertyGroup>
    <Message Text="WorkingDirectory = $(TargetRepo) Source=$(SourceBranch) Target=$(TargetBranch)" />
    <Message Text="Publish = $(Publish)" />
    <Exec Command="hg init $(TargetRepo)" Condition="!Exists('$(TargetRepo)')" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg pull $(SourceRepo)" Condition="'$(SourceRepo)' != '$(TargetRepo)'" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg up $(TargetBranch)$(CleanFlag)" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg merge '$(SourceBranchPrefix)$(SourceBranch)' --preview" Condition="'$(Preview)' != 'false'" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg merge '$(SourceBranchPrefix)$(SourceBranch)' --tool=$(ToolArgs) $(ExtraArgs)" Condition="'$(DoMerge)' == 'true' And '$(InternalMerge)' == 'true'" IgnoreExitCode="true" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg merge '$(SourceBranchPrefix)$(SourceBranch)'" Condition="'$(DoMerge)' == 'true' And '$(InternalMerge)' != 'true'" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg resolve --all" Condition="'$(DoMerge)' == 'true'" IgnoreExitCode="true" />
    <CallTarget Targets="CleanProjectFiles" />
    <Exec WorkingDirectory="$(TargetRepo)" Command='hg ci -m "@merge $(SourceBranch)"' Condition="'$(DoCommit)' == 'true'" IgnoreExitCode="true" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="PublishReq" Properties="TargetRepo=$(TargetRepo);Source=$(TargetBranch);UpdateBackToReqBranch=$(UpdateBackToReqBranch)" Condition="'$(Publish)' == 'true'" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg push $(SourceRepo)" Condition="'$(SourceRepo)' != '$(TargetRepo)' AND '$(DoCommit)' == 'true' AND '$(DoPush)' != 'false'" IgnoreExitCode="true" />
  </Target>
  
  <Target Name="MergeAll">
    <Error Text="Missing /p:SourceRepo" Condition="'$(SourceRepo)' == ''" />
    <Error Text="Missing /p:TargetRepo" Condition="'$(TargetRepo)' == ''" />
    <Error Text="Missing /p:TargetBranch" Condition="'$(TargetBranch)' == ''" />
    <Error Text="Missing /p:SourceBranches=&quot;&lt;Redmine;Branch;List&gt;&quot;" Condition="'$(SourceBranches)' == ''" />
    <ItemGroup>
      <BranchesToMerge Include="$(SourceBranches)" />
    </ItemGroup>
    
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="MergeBranches" Properties="SourceRepo=$(SourceRepo);TargetRepo=$(TargetRepo);SourceBranch=%(BranchesToMerge.Identity);TargetBranch=$(TargetBranch);DoCommit=true;DoMerge=true;Publish=False" />
  </Target>
  
  <Target Name="Merge">
    <Error Text="Missing /p:SourceRepo" Condition="'$(SourceRepo)' == ''" />
    <Error Text="Missing /p:SourceBranch" Condition="'$(SourceBranch)' == ''" />
    <Error Text="Missing /p:TargetBranch" Condition="'$(TargetBranch)' == ''" />
    
  </Target>
  
  <Target Name="PublishReq">
    <PropertyGroup>
      <TargetRepo>$([MSBuild]::ValueOrDefault(`$(TargetRepo)`, '$(MSBuildStartupDirectory)'))</TargetRepo>
      <UpdateBackToReqBranch>$([MSBuild]::ValueOrDefault(`$(UpdateBackToReqBranch)`, 'true'))</UpdateBackToReqBranch>
    </PropertyGroup>
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg branch > $(TargetRepo)\publishbranch.txt" />
    <ReadLinesFromFile File="$(MSBuildStartupDirectory)\publishbranch.txt">
      <Output TaskParameter="Lines" PropertyName="CurrentBranch" />
    </ReadLinesFromFile>
    <Message Text="CurrentBranch = $(CurrentBranch)" />
    <PropertyGroup>
      <Branch>$([MSBuild]::ValueOrDefault(`$(Source)`, '$(CurrentBranch)'))</Branch>
      <TargetBranch>$(Branch)_pub</TargetBranch>
    </PropertyGroup>
    <Message Text="SourceBranch = $(Branch)" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="MergeBranches" Properties='Publish=false;WorkingDirectory=$(TargetRepo);SourceRepo=$(TargetRepo);TargetRepo=$(TargetRepo);SourceBranch=$(Branch);TargetBranch=$(TargetBranch);CleanFlag= "";DoMerge=true;DoCommit=true' ContinueOnError="true" />
    <Exec WorkingDirectory="$(TargetRepo)" Command="hg up $(CurrentBranch)" Condition="'$(UpdateBackToReqBranch)' == 'true'" />
    <Delete Files="$(TargetRepo)\publishbranch.txt" />
  </Target>
  
</Project>
