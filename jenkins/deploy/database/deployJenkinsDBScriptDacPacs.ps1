<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.143
	 Created on:   	11/22/2017 13:46
	 Created by:   	jcollins
	 Organization: 	JIA, Inc.
	 Filename:     	deployJenkinsDBScriptDacPacs.ps1
	===========================================================================
	.DESCRIPTION
		A description of the file.
#>

param
(
	[Parameter(Mandatory = $true)]
	[string]$driver,
	[string]$config_json,
	[string]$deploy_env,
	[string]$build_time,
	[string]$workingdir
)


if (-not (test-path "C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\140\SqlPackage.exe")) { throw "C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\140\SqlPackage.exe" }
$exe = '"' + 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\140\SqlPackage.exe' + '"'


$workingDirectory = $workingdir
$dacpacFile = "$workingDirectory\DacPacs\$driver.Database.dacpac"
Write-Host "Working Directory is $workingDirectory" -foreground Green
Write-Output ('$dacpacFile : ' + $dacpacFile)

$json = Get-Content $config_json -Raw | ConvertFrom-Json
#$json = Get-Content "$($ENV:config_json)" -Raw | ConvertFrom-Json
$sqlserver = $json.$driver.environments.$deploy_env.sql.hostname
$dbName = $json.$driver.environments.$deploy_env.sql.dbName
$schemaUpdateDir = "$workingDirectory\SchemaUpdate"
$schemaUpdateScript = "SchemaUpdate.$dbName.$($build_time).sql"
$deployReportXML = "DeployReport.$($build_time).xml"

$prependLines = "--SchemaUpdate Script generated by SqlPackage.exe `n"
$prependLines = $prependLines + "--patch-date: 1976-07-04 `n"
$prependLines = $prependLines + "--SqlCmd: true `n"
$prependLines = $prependLines + "--phase: SchemaUpdate `n"
$prependLines = $prependLines + "--transaction: false `n"

if (Test-Path -Path "$schemaUpdateDir")
{
	$schemaUpdateFileCount = (Get-ChildItem -Path $schemaUpdateDir -Recurse | Measure-Object)
	if ($schemaUpdateFileCount.count -ge 1)
	{
		gci -Path "$schemaUpdateDir" -Recurse | Remove-Item
	}
	else
	{
		Write-Host "There are no Schema Update Scripts."
	}
}

$sf = "$dacpacFile"
$scriptOP = "$schemaUpdateDir\$schemaUpdateScript"
$reportOP = "$schemaUpdateDir\$deployReportXML"
$cs = ('"' + $env:ConnectionString + '"')

try
{
	$scriptAction = "Script"
	$scriptParam = "/Action:$scriptAction /SourceFile:$sf /tsn:$($sqlserver) /tdn:$($dbName) /p:IncludeCompositeObjects=true /p:ScriptDatabaseOptions=false /p:DropDmlTriggersNotInSource=False /p:BlockOnPossibleDataLoss=true /p:CommandTimeout=0 /OutputPath:$scriptOP"
	Write-Output "Generate Change Script"
	Write-Output "Args: $scriptParam"
	Write-Output ("$exe" + " " + $scriptParam)
	Start-Process -FilePath "$exe" -ArgumentList $scriptParam -PassThru -Wait -RedirectStandardError "$schemaUpdateDir\SchemaUpdate_$dbName_$($build_time).log"
}
catch
{
	$ErrorMessage = $_.Exception.Message
	Write-Error $ErrorMessage
}

if (Test-Path -path "$schemaUpdateDir\$schemaUpdateScript")
{
	$path = "$schemaUpdateDir\$schemaUpdateScript"
	$prependLines + (Get-Content $path -Raw) | Set-Content $path
}

try
{
	$reportAction = "DeployReport"
	$reportParam = "/Action:$reportAction /SourceFile:$sf /tsn:$sqlserver /tdn:$dbName /p:IncludeCompositeObjects=true /p:ScriptDatabaseOptions=false /p:DropDmlTriggersNotInSource=False /p:BlockOnPossibleDataLoss=true /p:CommandTimeout=0 /OutputPath:$reportOP"
	Write-Output "Generate DeployReport"
	Write-Output "Args: $reportParam"
	Write-Output ("$exe" + " " + $reportParam)
	Start-Process -FilePath "$exe" -ArgumentList $reportParam -PassThru -Wait -RedirectStandardError "$schemaUpdateDir\DeployReport_$($build_time).log"
}
catch
{
	$ErrorMessage = $_.Exception.Message
	Write-Error $ErrorMessage
}


