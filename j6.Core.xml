<?xml version="1.0"?>
<doc>
    <assembly>
        <name>j6.Core</name>
    </assembly>
    <members>
        <member name="T:j6.Core.Address">
            <summary>
            Holds physical address information.
            </summary>
        </member>
        <member name="T:j6.Core.CodeComponent">
            <summary>
            Base class that provides some validation for things that have a Code attribute.
            </summary>
        </member>
        <member name="T:j6.Core.IdComponent">
            <summary>
            Base class that provides 
            </summary>
        </member>
        <member name="T:j6.Core.ComponentBase">
            <summary>
            abstract base for components
            </summary>
        </member>
        <member name="M:j6.Core.ComponentBase.FireIdentifierChanged(System.String)">
            <summary>
            Fires the IdentifierChanged event
            </summary>
        </member>
        <member name="P:j6.Core.ComponentBase.Identifier">
            <summary>
            An identifier for this component, to be used in error messages.
            </summary>
        </member>
        <member name="E:j6.Core.ComponentBase.IdentifierChanged">
            <summary>
            Published event when a component's identification has changed
            </summary>
        </member>
        <member name="T:j6.Core.IId">
            <summary>
            Things that have an internal ID.
            </summary>
        </member>
        <member name="P:j6.Core.IId.Id">
            <summary>
            The internal ID for the object.
            </summary>
        </member>
        <member name="M:j6.Core.IdComponent.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.IdComponent.Id">
            <summary>
            Internal identifier
            </summary>
        </member>
        <member name="T:j6.Core.ICode">
            <summary>
            Things that have an identifying Code.
            </summary>
        </member>
        <member name="P:j6.Core.ICode.Code">
            <summary>
            An identifier that is unique for all objects in a particular collection.
            </summary>
        </member>
        <member name="T:j6.Core.IKey`1">
            <summary>
            Things that have a uniquely identifying key
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:j6.Core.IKey`1.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="M:j6.Core.CodeComponent.#ctor(System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.CodeComponent.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.CodeComponent.Equals(j6.Core.CodeComponent)">
            <summary>
            Compare to another codecomponent.
            </summary>
        </member>
        <member name="M:j6.Core.CodeComponent.Equals(System.Object)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:j6.Core.CodeComponent.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:j6.Core.CodeComponent.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.CodeComponent.Identifier">
            <summary>
            Overridden to return Code.
            </summary>
        </member>
        <member name="P:j6.Core.CodeComponent.Description">
            <summary>
            A short description for the object
            </summary>
        </member>
        <member name="P:j6.Core.CodeComponent.Code">
            <summary>
            Unique, human-readable identifier.
            </summary>
        </member>
        <member name="P:j6.Core.CodeComponent.Key">
            <summary>
            The Key (Code) for this CodeComponent
            </summary>
        </member>
        <member name="M:j6.Core.Address.Equals(System.Object)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:j6.Core.Address.Equals(j6.Core.Address)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:j6.Core.Address.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:j6.Core.Address.op_Equality(j6.Core.Address,j6.Core.Address)">
            <summary>
            Overloaded operator for Equals(left, right)
            </summary>
        </member>
        <member name="M:j6.Core.Address.op_Inequality(j6.Core.Address,j6.Core.Address)">
            <summary>
            Overloaded operator for !Equals(left, right)
            </summary>
        </member>
        <member name="P:j6.Core.Address.Line1">
            <summary>
            Line 1 of the street address
            </summary>
        </member>
        <member name="P:j6.Core.Address.Line2">
            <summary>
            Line 2 of the street address
            </summary>
        </member>
        <member name="P:j6.Core.Address.Line3">
            <summary>
            Line 3 of the street address
            </summary>
        </member>
        <member name="P:j6.Core.Address.Line4">
            <summary>
            Line 4 of the street address
            </summary>
        </member>
        <member name="P:j6.Core.Address.Line5">
            <summary>
            Line 5 of the street address
            </summary>
        </member>
        <member name="P:j6.Core.Address.Country">
            <summary>
            The country of the address
            </summary>
        </member>
        <member name="P:j6.Core.Address.StateProvince">
            <summary>
            The state or province of the address
            </summary>
        </member>
        <member name="P:j6.Core.Address.PostalCode">
            <summary>
            The postal (zip) code for the address
            </summary>
        </member>
        <member name="P:j6.Core.Address.City">
            <summary>
            The city of the address
            </summary>
        </member>
        <member name="P:j6.Core.Address.County">
            <summary>
            The county of the address
            </summary>
        </member>
        <member name="P:j6.Core.Address.GeoCode">
            <summary>
            A unique identifier that corresponds to specific combination of: 
            City-State-County-Unincorporated-Postal Code
            </summary>
        </member>
        <member name="P:j6.Core.Address.AddressType">
            <summary>
            AddressType.
            </summary>
        </member>
        <member name="P:j6.Core.Address.Unincorporated">
            <summary>
            A flag that indicates whether or not a location is unincorporated.
            Unincorporated could be defined as: A region of land is unincorporated 
            if it is not a part of any municipality. Unincorporated implies no city
            and hence no city, town, village, or other municipal government.
            </summary>
        </member>
        <member name="P:j6.Core.Address.ModifiedDate">
            <summary>
            The date and time this address was last modified
            </summary>
        </member>
        <member name="T:j6.Core.AddressMatches">
            <summary>
            AddressMatches is used with services that can find a list of addresses that closely match an existing or partial address.
            It is returned by AddressFlow.FindMatches
            </summary>
        </member>
        <member name="M:j6.Core.AddressMatches.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:j6.Core.AddressMatches.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{j6.Core.Address})">
            <summary>
            Initialized to contain all data that is sent out.
            </summary>
            <param name="useAddress1">AppSetting dependent on the type of search that we are performing.  Use/Ingore contents of Address1 field.</param>
            <param name="useAddress2">AppSetting dependent on the type of search that we are performing.  Use/Ingore contents of Address2 field.</param>
            <param name="useAddress3">AppSetting dependent on the type of search that we are performing.  Use/Ingore contents of Address3 field.</param>
            <param name="useAddress4">AppSetting dependent on the type of search that we are performing.  Use/Ingore contents of Address4 field.</param>
            <param name="useAddress5">AppSetting dependent on the type of search that we are performing.  Use/Ingore contents of Address5 field.</param>
            <param name="useCity">AppSetting dependent on the type of search that we are performing.  Use/Ingore contents of City field.</param>
            <param name="usePostalCode">AppSetting dependent on the type of search that we are performing.  Use/Ingore contents of PostalCode field.</param>
            <param name="useStateProvince">AppSetting dependent on the type of search that we are performing.  Use/Ingore contents of State/Province field.</param>
            <param name="addresses">List of possible addresses that match.</param>
        </member>
        <member name="P:j6.Core.AddressMatches.UseAddress1">
            <summary>
            This propert is controlled by the user settings.
            It tells you what I am validating for this customer.
            </summary>
        </member>
        <member name="P:j6.Core.AddressMatches.UseAddress2">
            <summary>
            This propert is controlled by the user settings.
            It tells you what I am validating for this customer.
            </summary>
        </member>
        <member name="P:j6.Core.AddressMatches.UseAddress3">
            <summary>
            This propert is controlled by the user settings.
            It tells you what I am validating for this customer.
            </summary>
        </member>
        <member name="P:j6.Core.AddressMatches.UseAddress4">
            <summary>
            This propert is controlled by the user settings.
            It tells you what I am validating for this customer.
            </summary>
        </member>
        <member name="P:j6.Core.AddressMatches.UseAddress5">
            <summary>
            This propert is controlled by the user settings.
            It tells you what I am validating for this customer.
            </summary>
        </member>
        <member name="P:j6.Core.AddressMatches.UseCity">
            <summary>
            This propert is controlled by the user settings.
            It tells you what I am validating for this customer.
            </summary>
        </member>
        <member name="P:j6.Core.AddressMatches.UsePostalCode">
            <summary>
            This propert is controlled by the user settings.
            It tells you what I am validating for this customer.
            </summary>
        </member>
        <member name="P:j6.Core.AddressMatches.UseStateProvince">
            <summary>
            This propert is controlled by the user settings.
            It tells you what I am validating for this customer.
            </summary>
        </member>
        <member name="P:j6.Core.AddressMatches.PossibleMatches">
            <summary>
            PossibleMatches is the list of addresses returned by the AFD software.
            If you want, I will return each full address.
            </summary>
        </member>
        <member name="T:j6.Core.AddressValidationMessage">
            <summary>
            Address validation message
            </summary>
        </member>
        <member name="P:j6.Core.AddressValidationMessage.IsValidPostalCode">
            <summary>
            Is PostalCode valid.
            </summary>
        </member>
        <member name="P:j6.Core.AddressValidationMessage.IsValidCity">
            <summary>
            Is city valid.
            </summary>
        </member>
        <member name="P:j6.Core.AddressValidationMessage.IsValidState">
            <summary>
            Is state valid.
            </summary>
        </member>
        <member name="P:j6.Core.AddressValidationMessage.InvalidPostalCodeMessage">
            <summary>
            Message for invalid postal code.
            </summary>
        </member>
        <member name="P:j6.Core.AddressValidationMessage.InvalidCityMessage">
            <summary>
            Message for invalid city.
            </summary>
        </member>
        <member name="P:j6.Core.AddressValidationMessage.InvalidStateMessage">
            <summary>
            Message for invalid state.
            </summary>
        </member>
        <member name="T:j6.Core.AlternateCodeType">
            <summary>
            AlternateCodeType.
            </summary>
        </member>
        <member name="T:j6.Core.Application">
            <summary>
            Application component.
            </summary>
        </member>
        <member name="T:j6.Core.AppSetting">
            <summary>
            Information about a setting
            </summary>
        </member>
        <member name="M:j6.Core.AppSetting.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.AppSetting.#ctor(System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:j6.Core.AppSetting.DefaultValue">
            <summary>
            The default value for this app setting
            </summary>
        </member>
        <member name="P:j6.Core.AppSetting.CustomizedValue">
            <summary>
            The value customized by the user
            </summary>
        </member>
        <member name="P:j6.Core.AppSetting.InstallationValue">
            <summary>
            The value for installation
            </summary>
        </member>
        <member name="P:j6.Core.AppSetting.Type">
            <summary>
            The datatype of the setting
            </summary>
        </member>
        <member name="P:j6.Core.AppSetting.Name">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="P:j6.Core.AppSetting.Comment">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:j6.Core.AppSetting.Value">
            <summary>
            The current value of the setting
            </summary>
        </member>
        <member name="P:j6.Core.AppSetting.Key">
            <summary>
            The key to identify this app setting
            </summary>
        </member>
        <member name="T:j6.Core.ArrayExtensions">
            <summary>Common extensions for Arrays</summary>
        </member>
        <member name="M:j6.Core.ArrayExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary><see cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/> </summary>
        </member>
        <member name="T:j6.Core.Attribute.ImmutableAttribute">
            <summary>
            A marker for immutable classes
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.AmountAttribute">
            <summary>
            Indicates the property is an amount field and its associate currency field
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.AmountAttribute.#ctor(System.String)">
            <summary>
            AmountAttribute
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.AmountAttribute.CurrencyField">
            <summary>
            CurrencyField
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.CodeAttribute">
            <summary>
            Used to indicate that the field must be a valid Code (rules depend on
            configuration, but typically something like [a-zA-Z][a-zA-Z0-9_]+).
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.CodeAttribute.IsValid(System.Object)">
            <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>
        </member>
        <member name="T:j6.Core.Attribute.ContentAttribute">
            <summary>
            Indicates that a property should be treated as managed content. Only applicable on 
            string type properties.
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.ContentAttribute.MaxLength">
            <summary>
            Maximum string length
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.ExplicitOverrideAttribute">
            <summary>
            Explicit Override
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.ExplicitOverrideAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.ExplicitOverrideAttribute.Overrides">
            <summary>
            Overrides
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.FlatAttribute">
            <summary>
            Indicate the workflow.method that flat a collection to a field
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.FlatAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            CollectionToMarkupAttribute
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.FlatAttribute.ImpAssembly">
            <summary>
            workflow
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.FlatAttribute.ImpClassName">
            <summary>
            method, the method has knowledge on what fields of the collection are using.
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.FlatAttribute.ImpMethod">
            <summary>
            method, the method has knowledge on what fields of the collection are using.
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.GeneratedAttribute">
            <summary>
            A marker for generated code
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.GreaterThanEqualAttribute">
            <summary>
            Used to indicate a field must be greater than a given value
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.GreaterThanEqualAttribute.#ctor(System.Decimal)">
            <summary>
            Public constructor
            </summary>
            <param name="minValue">Minimum value for comparsion</param>
        </member>
        <member name="T:j6.Core.Attribute.HeaderAttribute">
            <summary>
            Used to indicate fields of a component that are of interest in identifying it,
            even if not primary.
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.IncludeForEditView">
            <summary>
            Indicates that the column should be included in the edit and view views
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.IncludeForEditView.#ctor(System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="include"></param>
        </member>
        <member name="P:j6.Core.Attribute.IncludeForEditView.Include">
            <summary>
            Should the column be included
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.IncludeInSummary">
            <summary>
            Indicates that the column should or should not be included in a summary view.
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.IncludeInSummary.#ctor(System.Boolean)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.IncludeInSummary.Include">
            <summary>
            Should the column be included?
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.NonNegativeAttribute">
            <summary>
            Used to indicate a field must be greater or equal to zero
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.NonNegativeAttribute.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.OwnerAttribute">
            <summary>
            Indicates the property is a reference to 
            the entity that owns the object. This should
            resolve either to a User, ActivityCenter, or Account.
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.PersistableDate">
            <summary>
            Indicates that the date must fall in the range 1/1/1753 12:00:00 AM to 12/31/9999 11:59:59 PM,
            which is what SQL Server can store in a DATETIME.
            </summary>
        </member>
        <member name="F:j6.Core.Attribute.PersistableDate.Lowest">
            <summary>
             The lowest value that can be stored.
            </summary>
        </member>
        <member name="F:j6.Core.Attribute.PersistableDate.Highest">
            <summary>
            The highest value that can be stored.
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.PersistableDate.IsValid(System.Object)">
            <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>
        </member>
        <member name="T:j6.Core.Attribute.PrimaryAttribute">
            <summary>
            Used to indicate a primary key field on a component.
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.PureAttribute">
            <summary>
            A marker for pure (side-effect free) methods
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.ReferenceAttribute">
            <summary>
            Indicates that the property is a reference to an object of another type.
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.ReferenceAttribute.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.ReferenceAttribute.ReferenceType">
            <summary>
            The type of the referenced object
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.ReferenceAttribute.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.ReferenceAttribute.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.ReferenceAttribute.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.RepositoryAttribute">
            <summary>
            Indicates the repository interface that may be used
            to work with a component.
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.RepositoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.RepositoryAttribute.#ctor(System.Type)">
            <summary>
            Public constructor, default to use GetAll
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.RepositoryAttribute.RepositoryType">
            <summary>
            The type of the repository interface
            </summary>
        </member>
        <member name="P:j6.Core.Attribute.RepositoryAttribute.RepositoryMethod">
            <summary>
            The retrieval method of the repository interface
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.ValidateReferenceAttribute">
            <summary>
            Indicates that the property is a reference to an object of another type and should be validated.
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.ValidateReferenceAttribute.#ctor(System.Type)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="T:j6.Core.BrowserInfo">
            <summary>
            BrowserInfo component.
            </summary>
        </member>
        <member name="P:j6.Core.BrowserInfo.IPAddress">
            <summary>
            IP Address
            </summary>
        </member>
        <member name="P:j6.Core.BrowserInfo.UserAgent">
            <summary>
            User Agent, Browser
            </summary>
        </member>
        <member name="P:j6.Core.BrowserInfo.Account">
            <summary>
            Account code
            </summary>
        </member>
        <member name="T:j6.Core.CacheEntry">
            <summary>
            A serializable cache object
            </summary>
        </member>
        <member name="P:j6.Core.CacheEntry.Context">
            <summary>
            Cache Context
            </summary>
        </member>
        <member name="P:j6.Core.CacheEntry.Value">
            <summary>
            Value of the cached item
            </summary>
        </member>
        <member name="P:j6.Core.CacheEntry.EntryTime">
            <summary>
            The time this object was entered into the cache
            </summary>
        </member>
        <member name="P:j6.Core.CacheEntry.LastAccessed">
            <summary>
            The last time this cache entry was accessed
            </summary>
        </member>
        <member name="P:j6.Core.CacheEntry.LifeSpan">
            <summary>
            The amount of time this CacheEntry should exist
            </summary>
        </member>
        <member name="T:j6.Core.CacheMode">
            <summary>
            Determines the level of caching that will be used.
            </summary>
        </member>
        <member name="F:j6.Core.CacheMode.NONE">
            <summary>
            No caching
            </summary>
        </member>
        <member name="F:j6.Core.CacheMode.LOCAL">
            <summary>
            Cache in Context and Local cache
            </summary>
        </member>
        <member name="F:j6.Core.CacheMode.DISTRIBUTED">
            <summary>
            Cache in Distributed, Local, and Context cache
            </summary>
        </member>
        <member name="F:j6.Core.CacheMode.DEMAND">
            <summary>
            Cache objects one by one on demand
            </summary>
        </member>
        <member name="F:j6.Core.CacheMode.FULL">
            <summary>
            Everything is cached
            </summary>
        </member>
        <member name="T:j6.Core.City">
            <summary>
            City component
            </summary>
        </member>
        <member name="P:j6.Core.City.Name">
            <summary>
            City name
            </summary>
        </member>
        <member name="P:j6.Core.City.PostalCode">
            <summary>
            PostalCode name
            </summary>
        </member>
        <member name="T:j6.Core.Code">
            <summary>
            Represents the external identifier for some component.
            </summary>
        </member>
        <member name="M:j6.Core.Code.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:j6.Core.Code.#ctor(System.String)">
            <summary>
            Constructs a code with the given value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:j6.Core.Code.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"></see> for this instance.
            </summary>
            
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"></see> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"></see> number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.Decimal"></see> number equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"></see> using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.DateTime"></see> instance equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"></see> using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> instance equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"></see> of the specified <see cref="T:System.Type"></see> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> instance of type conversionType whose value is equivalent to the value of this instance.
            </returns>
            
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
            <param name="conversionType">The <see cref="T:System.Type"></see> to which the value of this instance is converted. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:j6.Core.Code.GetSchema">
            <summary>
            Returns the null to prevent this method from creating a schema
            </summary>
            <returns>XML Schema object.</returns>
        </member>
        <member name="M:j6.Core.Code.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the xml data into the value of this Code.
            </summary>
            <param name="reader">Xml Reader</param>
        </member>
        <member name="M:j6.Core.Code.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Sets the Value property from the Xml Writer
            </summary>
            <param name="writer">Xml Writer</param>
        </member>
        <member name="M:j6.Core.Code.QualifiedName(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Returns the qualified name for Code as just a string.
            </summary>
        </member>
        <member name="M:j6.Core.Code.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:j6.Core.Code.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.Code.ToString">
            <summary>
            Returns the string value of the code.
            </summary>
            <returns>Value property.</returns>
        </member>
        <member name="M:j6.Core.Code.Parse(System.String)">
            <summary>
             Parse a string into a Code object
            </summary>
        </member>
        <member name="M:j6.Core.Code.op_Implicit(j6.Core.Code)~System.String">
            <summary>
            Implicitly coverts the code to a string.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.Code.op_Implicit(System.String)~j6.Core.Code">
            <summary>
            Implicitly converts a string to a code.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.Code.op_Equality(j6.Core.Code,j6.Core.Code)">
            <summary>
            overload == operator
            </summary>
        </member>
        <member name="M:j6.Core.Code.op_Inequality(j6.Core.Code,j6.Core.Code)">
            <summary>
            overload != operator
            </summary>	    
        </member>
        <member name="P:j6.Core.Code.ValidCodeRegex">
            <summary>
            Regular expression that controls validation of codes
            </summary>
        </member>
        <member name="P:j6.Core.Code.Value">
            <summary>
            The code's value.
            </summary>
        </member>
        <member name="T:j6.Core.IActive">
            <summary>
            Things that have an Active attribute
            </summary>
        </member>
        <member name="P:j6.Core.IActive.Active">
            <summary>
            Active flag
            </summary>
        </member>
        <member name="T:j6.Core.ISystem">
            <summary>
            Things that have and identifying System
            </summary>
        </member>
        <member name="P:j6.Core.ISystem.System">
            <summary>
            Active flag
            </summary>
        </member>
        <member name="T:j6.Core.ActiveComponent">
            <summary>
            base class provide active flag
            </summary>
        </member>
        <member name="M:j6.Core.ActiveComponent.#ctor(j6.Core.Code)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:j6.Core.ActiveComponent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:j6.Core.ActiveComponent.Active">
            <summary>
            Active flag.
            </summary>
        </member>
        <member name="T:j6.Core.SystemComponent">
            <summary>
            base class provide system flag
            </summary>
        </member>
        <member name="M:j6.Core.SystemComponent.#ctor(j6.Core.Code)">
            <summary>
            Code Constructor
            </summary>
        </member>
        <member name="M:j6.Core.SystemComponent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:j6.Core.SystemComponent.System">
            <summary>
            System flag, when true, does not allow delete
            </summary>
        </member>
        <member name="T:j6.Core.Configuration">
            <summary>
            A configuration dictionary (Dictionary&lt;Type,List&lt;object&gt;&gt;)
            </summary>
        </member>
        <member name="T:j6.Core.SerializableConfiguration">
            <summary>
            A system configuration (or part of one).
            </summary>
        </member>
        <member name="M:j6.Core.SerializableConfiguration.#ctor(j6.Core.Configuration)">
            <summary>
            Build a SerializableConfiguration from Configuration
            </summary>
        </member>
        <member name="M:j6.Core.SerializableConfiguration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:j6.Core.SerializableConfiguration.GetDictionary">
            <summary>
            Gets the configuration dictionary from the serializable object
            </summary>
            <returns></returns>
        </member>
        <member name="P:j6.Core.SerializableConfiguration.AdditionalTypes">
            <summary>
            The types required for the XmlSerializer to deserialize this object completely
            </summary>
        </member>
        <member name="P:j6.Core.SerializableConfiguration.Items">
            <summary>
            The configurable items
            </summary>
        </member>
        <member name="T:j6.Core.SerializableConfigurationType">
            <summary>
            A configuration type which is XmlSerializable
            </summary>
        </member>
        <member name="P:j6.Core.SerializableConfigurationType.Type">
            <summary>
            The type of the objects in ConfigurationObjects
            </summary>
        </member>
        <member name="P:j6.Core.SerializableConfigurationType.ConfigurationObjects">
            <summary>
            The configuration items themselves
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.ConfigurationAdditionalTypesAttribute">
            <summary>
            Method that can return additional types to be used in serialization.
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.ConfigurationAttribute">
            <summary>
            Classes that are considered configuration, as opposed to transactional data.
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.ConfigurationExportMethodAttribute">
            <summary>
            Method that should be called instead of "GetAll" to export config.
            </summary>
        </member>
        <member name="T:j6.Core.ContentProperty">
            <summary>
            A property backed by the content management
            system.
            </summary>
        </member>
        <member name="M:j6.Core.ContentProperty.#ctor(j6.Core.ComponentBase,System.String)">
            <summary>
             Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.ContentProperty.#ctor(j6.Core.ComponentBase,j6.Core.ContentProperty)">
            <summary>
             Public constructor based on existing ContentProperty
            </summary>
        </member>
        <member name="M:j6.Core.ContentProperty.Get">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="M:j6.Core.ContentProperty.Set(System.String)">
            <summary>
            Sets the value.
            </summary>
        </member>
        <member name="P:j6.Core.ContentProperty.ResourceQuery">
            <summary>
            Gets the ResourceQuery for Context, Name, and Property.
            </summary>
        </member>
        <member name="T:j6.Core.ContentType">
            <summary>
            HTTP Content-Type infromation
            </summary>
        </member>
        <member name="P:j6.Core.ContentType.HttpContentType">
            <summary>
             Content-Type, e.g. text/html
            </summary>
        </member>
        <member name="P:j6.Core.ContentType.ContentHeader">
            <summary>
             Additional HTTP information, e.g. Content-disposition: attachment
            </summary>
        </member>
        <member name="P:j6.Core.ContentType.InlineRenderFormat">
            <summary>
             Format string where {0} = unique identifier and {1} = resource value 
            </summary>
        </member>
        <member name="T:j6.Core.CodeComparer`1">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
        </member>
        <member name="M:j6.Core.CodeComparer`1.Equals(`0,`0)">
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>
        </member>
        <member name="M:j6.Core.CodeComparer`1.GetHashCode(`0)">
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/>
        </member>
        <member name="T:j6.Core.CoreResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:j6.Core.CoreResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:j6.Core.CoreResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:j6.Core.CoreResources.GreaterThanAttribute_Validation">
            <summary>
              Looks up a localized string similar to The {0} field must be greater than {1}..
            </summary>
        </member>
        <member name="T:j6.Core.ExceptionExtensions">
            <summary>Exception helper methods</summary>
        </member>
        <member name="M:j6.Core.ExceptionExtensions.PreserveStackTrace(System.Exception)">
            <summary>
            Preserve StackTrace so exception can be rethrown
            </summary>
        </member>
        <member name="T:j6.Core.CountryCultureKey">
            <summary>Associated Country and Culture codes</summary>
        </member>
        <member name="T:j6.Core.StringPairIC">
            <summary>
            Holds a pair of strings, and compares without regard to case.
            </summary>
        </member>
        <member name="T:j6.Core.PairBase`2">
            <summary>
            Holds a pair of items.
            </summary>
        </member>
        <member name="F:j6.Core.PairBase`2._First">
            <summary>
            The first item in the pair
            </summary>
        </member>
        <member name="F:j6.Core.PairBase`2._Second">
            <summary>
            The second item in the pair
            </summary>
        </member>
        <member name="M:j6.Core.PairBase`2.#ctor(`0,`1)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.PairBase`2.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.PairBase`2.Equals(j6.Core.PairBase{`0,`1})">
            <summary>
            Two pairs are equal if their contents are equal
            </summary>
        </member>
        <member name="M:j6.Core.PairBase`2.Equals(System.Object)">
            <summary>
            Two pairs are equal if their contents are equal
            </summary>
        </member>
        <member name="M:j6.Core.PairBase`2.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:j6.Core.PairBase`2.HashCodeHelper(System.Object)">
            <summary>
            Static method to help construct the hash code for an object
            </summary>
        </member>
        <member name="M:j6.Core.PairBase`2.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:j6.Core.StringPairIC.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.StringPairIC.#ctor(System.String,System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.StringPairIC.Equals(j6.Core.PairBase{System.String,System.String})">
            <see cref="M:j6.Core.PairBase`2.Equals(j6.Core.PairBase{`0,`1})"/>
        </member>
        <member name="M:j6.Core.StringPairIC.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:j6.Core.StringPairIC.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:j6.Core.StringPairIC.CompareTo(System.Object)">
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="M:j6.Core.CountryCultureKey.HasValue">
            <summary>Determine if both paired strings have a value</summary>
        </member>
        <member name="P:j6.Core.CountryCultureKey.Country">
            <summary>Country code (aka First)</summary>
        </member>
        <member name="P:j6.Core.CountryCultureKey.Culture">
            <summary>Culture code (aka Second)</summary>
        </member>
        <member name="T:j6.Core.CountryCulture">
            <summary>
            CountryCulture
            </summary>
        </member>
        <member name="M:j6.Core.CountryCulture.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.CountryCulture.Country">
            <summary>
            Country code
            </summary>
        </member>
        <member name="P:j6.Core.CountryCulture.Culture">
            <summary>
            Culture code
            </summary>
        </member>
        <member name="P:j6.Core.CountryCulture.Primary">
            <summary>
            Indicates whether or not the current Culture is the Primary for the current Country.
            </summary>
        </member>
        <member name="P:j6.Core.CountryCulture.Key">
            <summary>
            CountryCultureKey
            </summary>
        </member>
        <member name="T:j6.Core.Exchange">
            <summary>
            An exchange object to do currency conversion
            </summary>
        </member>
        <member name="M:j6.Core.Exchange.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:j6.Core.Exchange.#ctor(j6.Core.ExchangeRate[])">
            <summary>
            Creates an exchange with the specified rates
            </summary>
            <param name="rates">The rates for the exchange (at most, two)</param>
            <exception cref="T:System.NotSupportedException">Throws if there are more than two rates requested</exception>
        </member>
        <member name="M:j6.Core.Exchange.Convert(j6.Core.Money,System.Boolean,System.String)">
            <summary>
            Performs an exchange using the specified exchange rate(s)
            </summary>
            <param name="fromAmount">The Money amount to convert</param>
            <param name="currencyFormat">The format string with which to format the currency</param>
            <returns>An exchange object with the from and to amounts</returns>
        </member>
        <member name="M:j6.Core.Exchange.GetTargetCurrency(System.String)">
            <summary>
            Returns the target currency given a specific currency to convert from using all the exchange rates in this exchange
            </summary>
        </member>
        <member name="P:j6.Core.Exchange.ApplicableCurrencies">
            <summary>
            The currencies which may be used with this exchange
            </summary>
        </member>
        <member name="P:j6.Core.Exchange.ExchangeRates">
            <summary>
            The exchange rates defined for this exchange
            </summary>
        </member>
        <member name="P:j6.Core.Exchange.EffectiveExchangeRate">
            <summary>
            The effective rate after all exchange rates have been applied
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.GreaterThanAttribute">
            <summary>
            Used to indicate a field must be greater than a given value
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.GreaterThanAttribute.#ctor(System.Decimal)">
            <summary>
            Public constructor
            </summary>
            <param name="minValue">Minimum value for comparsion</param>
        </member>
        <member name="M:j6.Core.Attribute.GreaterThanAttribute.IsValid(System.Object)">
            <see cref="M:System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(System.Object)"/>
        </member>
        <member name="P:j6.Core.Attribute.GreaterThanAttribute.MinValue">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="T:j6.Core.ICommandFactory">
            <summary>
            Provides access to the database via DbCommand objects
            </summary>
        </member>
        <member name="M:j6.Core.ICommandFactory.CreateCommandAsync(j6.Core.AuditMode)">
            <summary>
            Returns a command object associated with an open
            connection. When the command is disposed, the connection
            will also be disposed.
            </summary>
        </member>
        <member name="M:j6.Core.ICommandFactory.CreateReportingCommandAsync">
            <summary>
            Returns a command object associated with an open
            connection. When the command is disposed, the connection
            will also be disposed.
            </summary>
        </member>
        <member name="T:j6.Core.IConfigurationService">
            <summary>
            Interface for managing configurations
            </summary>
        </member>
        <member name="M:j6.Core.IConfigurationService.GetConfiguration(System.Type[])">
            <summary>
            Retrieve the current configuration
            </summary>
        </member>
        <member name="M:j6.Core.IConfigurationService.SetConfiguration(j6.Core.Configuration,System.Type[])">
            <summary>
            Set a new configuration.
            </summary>
        </member>
        <member name="M:j6.Core.IConfigurationService.GetDocument(j6.Core.Configuration)">
            <summary>
            Converts a configuration to an XDocument
            </summary>
        </member>
        <member name="M:j6.Core.IConfigurationService.GetDictionary(System.Xml.Linq.XDocument)">
            <summary>
            Converts an XDocument to a configuration.
            </summary>
        </member>
        <member name="M:j6.Core.IConfigurationService.ValidateConfiguration(j6.Core.Configuration)">
            <summary>
            Validates a configuration
            </summary>
        </member>
        <member name="T:j6.Core.IConfigurableFlow">
            <summary>
            Workflow for configurables.
            </summary>
        </member>
        <member name="T:j6.Core.ISyncRepository`2">
            <summary>
            Synchronous interface for create/read/update/delete of components.
            </summary>
        </member>
        <member name="T:j6.Core.IRepository`2">
            <summary>
            Standard async interface for create/read/update/delete of components.
            </summary>
        </member>
        <member name="T:j6.Core.IEventSource">
            <summary>
            Things (such as services) that generate events
            </summary>
        </member>
        <member name="E:j6.Core.IEventSource.EventOccurred">
            <summary>
            Generic event handling.
            </summary>
        </member>
        <member name="M:j6.Core.IRepository`2.CreateAsync(System.Collections.Generic.IEnumerable{`0},j6.Core.OperationErrorMode)">
            <summary>
            Inserts the components into the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.IRepository`2.EnsureAsync(System.Collections.Generic.IEnumerable{`0},j6.Core.OperationErrorMode)">
            <summary>
            Makes sure the components exist in the data repository, creates them if not.
            </summary>
        </member>
        <member name="M:j6.Core.IRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0},j6.Core.OperationErrorMode)">
            <summary>
            Updates an existing component in the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.IRepository`2.ExistsAsync(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Vectorized implementation of Exists.
            Checks to see if the given keys are in use for components
            </summary>
        </member>
        <member name="M:j6.Core.IRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{`1},j6.Core.OperationErrorMode)">
            <summary>
            Deletes the components for the given keys, if they exist.
            </summary>
            Throws NoSuchObject exception if no match is found.
        </member>
        <member name="M:j6.Core.IRepository`2.GetAsync(System.Collections.Generic.IEnumerable{`1},j6.Core.OperationErrorMode)">
            <summary>
            Returns all the components that match the given keys
            </summary>
            <returns>Array of component objects</returns>
        </member>
        <member name="M:j6.Core.IRepository`2.RenameAsync(System.Collections.Generic.IEnumerable{j6.Core.Pair{`0,`1}})">
            <summary>
            Updates the key of an existing component in the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.IRepository`2.GetKeysByIds(System.Collections.Generic.IEnumerable{System.Int32},j6.Core.OperationErrorMode)">
            <summary>
            Returns a dictionary with the Id as the key and the Component Key as the value
            </summary>
        </member>
        <member name="M:j6.Core.IRepository`2.GetByIds(System.Collections.Generic.IEnumerable{System.Int32},j6.Core.OperationErrorMode)">
            <summary> Gets an IEnumerable of components based upon their entityIds </summary>
        </member>
        <member name="M:j6.Core.IRepository`2.GetIdsByKeys(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1},j6.Core.OperationErrorMode)">
            <summary>
            Returns a dictionary with the ComponentKey as the key and the Id as the value
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.CreateAll(System.Collections.Generic.IEnumerable{`0},j6.Core.OperationErrorMode)">
            <summary>
            Inserts the components into the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.CreateAllByObject(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates all items as an enumerable of objects rather than {TComponent}
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.EnsureAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Makes sure the components exist in the database, creates them if not.
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.UpdateAll(System.Collections.Generic.IEnumerable{`0},j6.Core.OperationErrorMode)">
            <summary>
            Updates an existing component in the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.UpdateAllByObject(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates all items as an enumerable of objects rather than {TComponent}
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.Exists(`1)">
            <summary>
            Checks to see if the given code is in use for this component
            type.
            </summary>
            <param name="code">Code of component object to look for the existance of.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.DeleteAll(System.Collections.Generic.IEnumerable{`1},j6.Core.OperationErrorMode)">
            <summary>
            Deletes the components for the given keys, if they exist.
            </summary>
            Throws NoSuchObject exception if no match is found.
        </member>
        <member name="M:j6.Core.ISyncRepository`2.Exists(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Vectorized implementation of Exists.
            Checks to see if the given keys are in use for components
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.GetByKey(`1)">
            <summary>
            Returns the component for the given code, if one exists.
            </summary>
            Otherwise, returns null.
            <param name="code">Return component object with the given code.</param>
            <returns>Component object</returns>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.GetByKeys(System.Collections.Generic.IEnumerable{`1},j6.Core.OperationErrorMode)">
            <summary>
            Returns all the components that match the given keys
            </summary>
            <returns>Array of component objects</returns>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.GetAll">
            <summary>
            Returns all the components of this type.
            </summary>
            <returns>Array of component objects</returns>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.Search(System.String,System.Int32)">
            <summary>
            Retrieves components matching criteria
            </summary>
            <param name="criteria">Search code for matching criteria text</param>
            <param name="count">Limit the number of components returned</param>
            <returns>Array of component objects</returns>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.Rename(`0,`1)">
            <summary>
            Updates the key of an existing component in the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.SetNewKey(`0)">
            <summary>
            Assign a new key to an existing component in the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.SetNewKeys(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Assign a new key to existing components in the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.SetNewKeys(System.Collections.Generic.IEnumerable{`0},j6.Core.OperationErrorMode)">
            <summary>
            Assign a new key to existing components in the data repository.
            </summary>
        </member>
        <member name="M:j6.Core.ISyncRepository`2.ClearCache(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Clears any cache and sends (internal) update events for the specified keys
            </summary>
        </member>
        <member name="T:j6.Core.Configurable">
            <summary>
            Configurable classes
            </summary>
        </member>
        <member name="T:j6.Core.ICurrencyRepository">
            <summary>
            Interface for a currency data repository
            </summary>
        </member>
        <member name="T:j6.Core.ICodeRepository`1">
            <summary>
            Generic interface for repositories that work with ICode components.
            </summary>
            <typeparam name="TComponent">Component object</typeparam>
        </member>
        <member name="T:j6.Core.IGetAllAsync`1">
            <summary>
            Interface for things that can be fully enumerated
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="M:j6.Core.IGetAllAsync`1.GetAllAsync">
            <summary>
            Returns all the components of this type.
            </summary>
            <returns>Array of component objects</returns>
        </member>
        <member name="M:j6.Core.ICurrencyRepository.GetAllCurrencyDetail">
            <see cref="M:j6.Core.ICurrencyFlow.GetAllCurrencyDetail"/>
        </member>
        <member name="M:j6.Core.ICurrencyRepository.GetByCountry(System.String)">
            <summary>
            Get all currencies for specified country
            </summary>
        </member>
        <member name="T:j6.Core.ICountryCultureFlow">
            <summary>
            CountryCultureFlow interface
            </summary>
        </member>
        <member name="M:j6.Core.ICountryCultureFlow.GetByCountry(System.String)">
            <summary>
            Get country culture by country
            </summary>
        </member>
        <member name="M:j6.Core.ICountryCultureFlow.ValidateDuplicatePrimary(j6.Core.CountryCulture)">
            <summary>
            Checks to see if the incoming CountryCulture would cause 2 Primary's to exist for 1 Country.
            </summary>
            <param name="countryCulture"></param>
            <returns></returns>
        </member>
        <member name="T:j6.Core.IExchangeRateFlow">
            <summary>
            Flow for information about currency exchange, as well as performs currency exchange
            </summary>
        </member>
        <member name="M:j6.Core.IExchangeRateFlow.GetEffectiveAndFutureByDate(System.DateTime)">
            <summary>
            Specialized query for current and future exchange rates
            </summary>
            <param name="date">The effective date of the requested exchange rates</param>
            <returns>The current exchange rate and the next one to be current (if available) for each exchange rate type</returns>
        </member>
        <member name="M:j6.Core.IExchangeRateFlow.GetRates(j6.Core.ExchangeRateQuery)">
            <summary>
            Gets the current exchange rates based upon query criteria
            </summary>
            <param name="query">An ExchangeRateQuery object which specifies the critiera for this request</param>
            <returns>0, 1, or 2 exchange rate objects to describe how the currency exchange should be calculated</returns>
        </member>
        <member name="M:j6.Core.IExchangeRateFlow.GetRates(System.Collections.Generic.IEnumerable{j6.Core.ExchangeRateQuery})">
            <summary>
            Vectorized version of GetRates(ExchangeRateQuery)
            </summary>
            <param name="queries">The ExchangeRateQuery object list for the items to be looked up</param>
            <returns>A dictionary containing 0, 1, or 2 exchange rates for each query object</returns>
        </member>
        <member name="M:j6.Core.IExchangeRateFlow.Exchange(j6.Core.ExchangeQuery,System.Boolean)">
            <summary>
            Calculates the exchange for one exchange query
            </summary>
            <param name="exchangeQuery">The query object which describes the To and From currencies and a list of amounts to be converted</param>
            <param name="returnNullWhenNoConversion">true if you want to suppress the NoConversionException</param>
            <returns>A list of exchanges, one for each amount which has been converted</returns>
        </member>
        <member name="M:j6.Core.IExchangeRateFlow.Exchange(System.Collections.Generic.IEnumerable{j6.Core.ExchangeQuery},System.Boolean)">
            <summary>
            Calculates the exchange for multiple exchange queries
            </summary>
            <param name="exchangeQueries">The query objects which describes the To and From currencies and lists of amounts to be converted</param>
            <param name="returnNullWhenNoConversion">true if you want to suppress the NoConversionException</param>
            <returns>A dictionary of queries and their exchanges after having been converted</returns>
        </member>
        <member name="M:j6.Core.IExchangeRateFlow.ValidateExchanges(System.Collections.Generic.IEnumerable{j6.Core.IMonetaryComponent})">
            <summary>
            Validates that the exchanges are current for the monetary components passed in with the specified countries
            </summary>
        </member>
        <member name="M:j6.Core.IExchangeRateFlow.GetInvalidExchanges(System.Collections.Generic.IEnumerable{j6.Core.IMonetaryComponent})">
            <summary>
            Returns an array of exchanges which are invalid
            </summary>
        </member>
        <member name="T:j6.Core.ExchangeQuery">
            <summary>
            Query object for performing exchange calcuations
            </summary>
        </member>
        <member name="P:j6.Core.ExchangeQuery.ToCurrency">
            <summary>
            The target currency requested
            </summary>
        </member>
        <member name="P:j6.Core.ExchangeQuery.ExchangeRateType">
            <summary>
            The type of exchange rate to use in the conversion
            </summary>
        </member>
        <member name="P:j6.Core.ExchangeQuery.EffectiveDate">
            <summary>
            The effective date of the conversion to be performed
            </summary>
        </member>
        <member name="P:j6.Core.ExchangeQuery.FromAmounts">
            <summary>
            List of amounts to be converted
            </summary>
        </member>
        <member name="T:j6.Core.ExchangeRateQuery">
            <summary>
            Query object for looking up conversion rates
            </summary>
        </member>
        <member name="M:j6.Core.ExchangeRateQuery.#ctor(j6.Core.ExchangeQuery,j6.Core.Money)">
            <summary>
            Constructor to build an ExchangeRateQuery from an ExchangeQuery
            </summary>
        </member>
        <member name="P:j6.Core.ExchangeRateQuery.FromCurrency">
            <summary>
            The "from" currency to look up
            </summary>
        </member>
        <member name="P:j6.Core.ExchangeRateQuery.ToCurrency">
            <summary>
            The "to" currency to look up
            </summary>
        </member>
        <member name="P:j6.Core.ExchangeRateQuery.ExchangeRateType">
            <summary>
            The exchange rate type requested
            </summary>
        </member>
        <member name="P:j6.Core.ExchangeRateQuery.EffectiveDate">
            <summary>
            The effective date of the rate requested
            </summary>
        </member>
        <member name="T:j6.Core.IExchangeRateTypeFlow">
            <summary>
            Operations on exchange rate types
            </summary>
        </member>
        <member name="T:j6.Core.IMonetaryComponent`1">
            <summary>
            Things that have monetary values in both primary and local currencies
            </summary>
        </member>
        <member name="P:j6.Core.IMonetaryComponent`1.Primary">
            <summary>
            The wallet for the primary currency. May not be null.
            </summary>
        </member>
        <member name="P:j6.Core.IMonetaryComponent`1.Local">
            <summary>
            The wallet for the local currency. May not be null.
            </summary>
        </member>
        <member name="T:j6.Core.INoteTypeCategoryFlow">
            <summary>
            Data access flow for working with NoteTypeCategory classes.
            </summary>
        </member>
        <member name="T:j6.Core.INoteTypeFlow">
            <summary>
            Data access flow for working with NoteType classes.
            </summary>
        </member>
        <member name="M:j6.Core.INoteTypeFlow.GetByNoteTypeCategory(System.String)">
            <summary>
            A list of all note types by category
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.INoteTypeFlow.GetByNoteTypeCategoryAndIsManualEntry(System.String,System.Boolean)">
            <summary>
            A list of all note types by category, with or without manualEntry
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.INoteTypeFlow.GetDeletableNoteTypes">
            <summary>
            A list of NoteTypes that can be deleted
            </summary>
            <returns></returns>
        </member>
        <member name="T:j6.Core.MonetaryComponent`1">
            <summary>
            A component which contains monetary values
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryComponent`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryComponent`1.InvertCurrencies">
            <summary>
            Reverses Primary and Local currencies
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryComponent`1.Exchange">
            <summary>
            The exchange to use to calcuate Local currency values from System currency values
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryComponent`1.Primary">
            <summary>
            SalesOrder monetary amounts in system (specified by "Currency" rather than "PaymentCurrency") currency
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryComponent`1.Local">
            <summary>
            SalesOrder monetary amounts in local ("PaymentCurrency") currency. Since local values are all 
            calculated, setting this value is ignored.
            </summary>
        </member>
        <member name="T:j6.Core.MonetaryIdComponent`1">
            <summary>
            A component which contains monetary values
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryIdComponent`1.j6#Core#IMonetaryComponent#FillValues(System.Collections.Generic.IDictionary{System.String,j6.Core.Money})">
            <summary>
            Used for deserialization, fills the values in the wallet with those passed in
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryIdComponent`1.InvertCurrencies">
            <summary>
            Performs an exchange and swaps Primary and local currencies (use sparingly!)
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryIdComponent`1.Exchange">
            <summary>
            The exchange to use to calcuate Local currency values from System currency values
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryIdComponent`1.Local">
            <summary>
            SalesOrder monetary amounts in local ("PaymentCurrency") currency
            </summary>
        </member>
        <member name="T:j6.Core.MonetaryCodeComponent`1">
            <summary>
            A component which contains monetary values
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryCodeComponent`1.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryCodeComponent`1.#ctor(System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryCodeComponent`1.j6#Core#IMonetaryComponent#FillValues(System.Collections.Generic.IDictionary{System.String,j6.Core.Money})">
            <summary>
            Used for deserialization, fills the values in the wallet with those passed in
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryCodeComponent`1.InvertCurrencies">
            <summary>
            Performs an exchange and swaps Primary and local currencies (use sparingly!)
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryCodeComponent`1.Exchange">
            <summary>
            The exchange to use to calcuate Local currency values from System currency values
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryCodeComponent`1.Local">
            <summary>
            SalesOrder monetary amounts in local ("PaymentCurrency") currency
            </summary>
        </member>
        <member name="T:j6.Core.MonetaryComponentList`2">
            <summary>
            Wrapper class for items with monetary value belonging to a component which contains the currency exchange
            </summary>
            <typeparam name="TComponent">The type of child component (i.e. CartItem, OrderItem)</typeparam>
            <typeparam name="TWallet">The type of wallet for the child component</typeparam>
        </member>
        <member name="M:j6.Core.MonetaryComponentList`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryComponentList`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Builds a list with a list of initial items
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryComponentList`2.Add(`0)">
            <summary>
            Adds an item to the list
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryComponentList`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="items">The IEnumerable&lt;TComponent&gt; of items to add</param>
        </member>
        <member name="M:j6.Core.MonetaryComponentList`2.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="M:j6.Core.MonetaryComponentList`2.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the list
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:j6.Core.MonetaryComponentList`2.PrimaryCurrency">
            <summary>
            The primary currency of the items in the list
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryComponentList`2.Exchange">
            <summary>
            Sets all the exchanges for the monetaryComponents in the list
            </summary>
        </member>
        <member name="P:j6.Core.MonetaryComponentList`2.Item(System.Int32)">
            <summary>
            Gets or sets an item in the list
            </summary>
        </member>
        <member name="T:j6.Core.NestedItem">
            <summary>
            Useful for items that need to nest themselves. Example: Menus and Categories.
            </summary>
        </member>
        <member name="M:j6.Core.NestedItem.#ctor">
            <summary>
            Public Constructor
            </summary>
        </member>
        <member name="P:j6.Core.NestedItem.Code">
            <summary>
            Unique Identifier
            </summary>
        </member>
        <member name="P:j6.Core.NestedItem.Description">
            <summary>
            Human readable value
            </summary>
        </member>
        <member name="P:j6.Core.NestedItem.Sequence">
            <summary>
            The order the item should be sorted
            </summary>
        </member>
        <member name="P:j6.Core.NestedItem.Enabled">
            <summary>
            Indicator of whether or not the is enabled
            </summary>
        </member>
        <member name="P:j6.Core.NestedItem.HasAttached">
            <summary>
            Indicator of whether or not this item has other things attached to it
            </summary>
        </member>
        <member name="P:j6.Core.NestedItem.Items">
            <summary>
            Child Items
            </summary>
        </member>
        <member name="T:j6.Core.IUserLoginTokenFlow">
            <summary>
            Defines logic to restrict multiple logins for a user.
            </summary>
        </member>
        <member name="M:j6.Core.IUserLoginTokenFlow.Logout(System.String)">
            <summary>
            Called when a user logs off. Deletes the user's record from the UserLoginToken table.
            Used to disallow the user to be logged in multiple times from different locations.
            </summary>
        </member>
        <member name="M:j6.Core.IUserLoginTokenFlow.CheckToken(System.String,System.String)">
            <summary>
            Checks to see if this user should be restricted because they are trying to have 
              multiple active logins from different locations.
            Used to disallow the user to be logged in multiple times from different locations.
            </summary>
            <returns>The token code if the user is able to login, null if they are restricted</returns>
        </member>
        <member name="T:j6.Core.NoteType">
            <summary>
             NoteType component
            </summary>
        </member>
        <member name="P:j6.Core.NoteType.NoteTypeCategory">
            <summary>
            Notebook Notetype Category
            </summary>
        </member>
        <member name="P:j6.Core.NoteType.AllowManualEntry">
            <summary>
            Notebook Notetype Allow manual entry flag
            </summary>
        </member>
        <member name="T:j6.Core.NoteTypeCategory">
            <summary>
            NoteTypeCategory component
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.PositiveAttribute">
            <summary>
            Used to indicate a field must be greater than zero
            </summary>
        </member>
        <member name="M:j6.Core.Attribute.PositiveAttribute.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="T:j6.Core.Quartet`4">
            <summary>
            Holds a quartet of items.
            </summary>
        </member>
        <member name="M:j6.Core.Quartet`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Quartet`4.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Quartet`4.Equals(j6.Core.Quartet{`0,`1,`2,`3})">
            <summary>
            Two quartets are equal if their contents are equal
            </summary>
        </member>
        <member name="M:j6.Core.Quartet`4.Equals(System.Object)">
            <summary>
            Two quartets are equal if their contents are equal
            </summary>
        </member>
        <member name="M:j6.Core.Quartet`4.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:j6.Core.Quartet`4.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="P:j6.Core.Quartet`4.First">
            <summary>
            The first item of the quartet.
            </summary>
        </member>
        <member name="P:j6.Core.Quartet`4.Second">
            <summary>
            The second item of the quartet.
            </summary>
        </member>
        <member name="P:j6.Core.Quartet`4.Third">
            <summary>
            The third item of the quartet.
            </summary>
        </member>
        <member name="P:j6.Core.Quartet`4.Fourth">
            <summary>
            The fourth item of the quartet.
            </summary>
        </member>
        <member name="T:j6.Core.Recipient">
            <summary>
            Recipient
            </summary>
        </member>
        <member name="P:j6.Core.Recipient.Culture">
            <summary>
            Culture
            </summary>
        </member>
        <member name="P:j6.Core.Recipient.ContactAddress">
            <summary>
            Contact Address
            </summary>
        </member>
        <member name="P:j6.Core.Recipient.Owner">
            <summary>
            Owner(Account Code) of ContactAddress
            </summary>
        </member>
        <member name="P:j6.Core.Recipient.Disposition">
            <summary>
            Disposition (To, From, Cc, Bcc)
            </summary>
        </member>
        <member name="T:j6.Core.RequestState">
            <summary>
            The state of the queued request
            </summary>
        </member>
        <member name="F:j6.Core.RequestState.PENDING">
            <summary>
            Has not been started
            </summary>
        </member>
        <member name="F:j6.Core.RequestState.PROCESSING">
            <summary>
            Is currently running
            </summary>
        </member>
        <member name="F:j6.Core.RequestState.COMPLETE">
            <summary>
            Has Completed
            </summary>
        </member>
        <member name="F:j6.Core.RequestState.EXCEPTION">
            <summary>
            The process resulted in an exception
            </summary>
        </member>
        <member name="F:j6.Core.RequestState.NOT_IN_QUEUE">
            <summary>
            The item has either not been submitted or has expired from the queue
            </summary>
        </member>
        <member name="T:j6.Core.RequestStatus">
            <summary>
            The status of a pending request
            </summary>
        </member>
        <member name="P:j6.Core.RequestStatus.ExceptionInfo">
            <summary>
            Used to re-populate the exception info property for exceptions which have been cached and not deserialized correctly
            </summary>
            <returns></returns>
        </member>
        <member name="P:j6.Core.RequestStatus.RequestId">
            <summary>
            The unique identifier to identify this request
            </summary>
        </member>
        <member name="P:j6.Core.RequestStatus.State">
            <summary>
            The state of the request
            </summary>
        </member>
        <member name="P:j6.Core.RequestStatus.Exception">
            <summary>
            The error if the request state is EXCEPTION
            </summary>
        </member>
        <member name="T:j6.Core.ExceptionInfo">
            <summary>
            Summary object for Exceptions so we can more easily serialize an exception
            </summary>
        </member>
        <member name="M:j6.Core.ExceptionInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:j6.Core.ExceptionInfo.#ctor(System.Exception)">
            <summary>
            Creates an ExceptionInfo from a given exception, walking through the inner exceptions
            </summary>
        </member>
        <member name="P:j6.Core.ExceptionInfo.Inner">
            <summary>
            The ExceptionInfo from any Inner Exception
            </summary>
        </member>
        <member name="P:j6.Core.ExceptionInfo.Message">
            <summary>
            The message from the original exception
            </summary>
        </member>
        <member name="P:j6.Core.ExceptionInfo.StackTrace">
            <summary>
            The stack trace of the original exception
            </summary>
        </member>
        <member name="P:j6.Core.ExceptionInfo.String">
            <summary>
            The full "ToString" output of the original exception
            </summary>
        </member>
        <member name="T:j6.Core.StringExtensions">
            <summary>Common extensions for string objects</summary>
        </member>
        <member name="M:j6.Core.StringExtensions.IsNullOrEmpty(System.String)">
            <summary><see cref="M:System.String.IsNullOrEmpty(System.String)"/> </summary>
            <param name="value">String to evaluate</param>
            <returns>Boolean indication of null or empty value</returns>
        </member>
        <member name="M:j6.Core.StringExtensions.IsNotNullNorEmpty(System.String)">
            <summary>Quick negation of <see cref="M:System.String.IsNullOrEmpty(System.String)"/> </summary>
            <param name="value">String to evaluate</param>
            <returns>Boolean indication of neither null nor empty value</returns>
        </member>
        <member name="M:j6.Core.StringExtensions.ToCsv``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts an enumeration of string values into a concatenated CSV string
            </summary>
            <param name="values">The values to concatentate</param>
            <param name="delimiter">The delimiter</param>
            <returns>The concatentated string</returns>
        </member>
        <member name="M:j6.Core.StringExtensions.ToDelimitedValueString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts an enumeration of string values into a concatenated string delimited by a specified delimiter
            </summary>
            <param name="values">The values to concatenate</param>
            <param name="delimiter">The delimiter</param>
            <returns>The concatenated string</returns>
        </member>
        <member name="M:j6.Core.StringExtensions.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a query string for passing on a web request (assumes you've already UrlEncoded the values)
            </summary>
            <param name="values">The values to be concatentated</param>
            <returns>The concatenated query string</returns>
        </member>
        <member name="M:j6.Core.StringExtensions.ToConcatenatedKeyValueString(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String)">
            <summary>
            Converts a dictionary of key/value pairs into a concatenated string of key value pairs
            </summary>
            <param name="values">The values to concatenate</param>
            <param name="begin">The character sequence to indicate the beginning of a key/value pair (i.e. "{ " for a JSON pair)</param>
            <param name="keyValueDelimiter">The key/value delimiter (i.e. "=" or ":")</param>
            <param name="end">The character sequence to indicate the ending of a key/value pair (i.e. " }" for a JSON pair)</param>
            <returns>The concatenated string</returns>
        </member>
        <member name="M:j6.Core.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Extend Contains to allow specifying StringComparison
            </summary>
        </member>
        <member name="M:j6.Core.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Extend Replace to allow specifying StringComparison
            </summary>
        </member>
        <member name="M:j6.Core.StringExtensions.StripTags(System.String)">
            <summary>
            Strip Xml,Html tags from a given input string 'str'.
            </summary>
            <param name="str">Input string for tag replacement.</param>
            <returns>Replaced string w/o tags.</returns>
        </member>
        <member name="T:j6.Core.TaskExtensions">
            <summary>Task helper methods</summary>
        </member>
        <member name="M:j6.Core.TaskExtensions.ResultWithFlatten``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken,System.TimeSpan)">
            <summary>Wait for Task; Flatten any AggregateExceptions to the first actual exception.</summary>
        </member>
        <member name="M:j6.Core.TaskExtensions.WaitWithFlatten(System.Threading.Tasks.Task,System.Threading.CancellationToken,System.TimeSpan)">
            <summary>Wait for Task with cancellation token; Flatten any AggregateExceptions to the first actual exception.</summary>
        </member>
        <member name="T:j6.Core.Trio`3">
            <summary>
            Holds a trio of items.
            </summary>
        </member>
        <member name="M:j6.Core.Trio`3.#ctor(`0,`1,`2)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Trio`3.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Trio`3.Equals(j6.Core.Trio{`0,`1,`2})">
            <summary>
            Two trios are equal if their contents are equal
            </summary>
        </member>
        <member name="M:j6.Core.Trio`3.Equals(System.Object)">
            <summary>
            Two trios are equal if their contents are equal
            </summary>
        </member>
        <member name="M:j6.Core.Trio`3.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:j6.Core.Trio`3.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="P:j6.Core.Trio`3.First">
            <summary>
            The first item of the trio.
            </summary>
        </member>
        <member name="P:j6.Core.Trio`3.Second">
            <summary>
            The second item of the trio.
            </summary>
        </member>
        <member name="P:j6.Core.Trio`3.Third">
            <summary>
            The third item of the trio.
            </summary>
        </member>
        <member name="T:j6.Core.Country">
            <summary>
            Country information
            </summary>
        </member>
        <member name="M:j6.Core.Country.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Country.#ctor(System.String,System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Country.Clone">
            <see cref="M:j6.Core.CodeComponent.Clone"/>
        </member>
        <member name="P:j6.Core.Country.Id">
            <summary>
            Always returns -1 because a country does not have an Id in the database
            </summary>
        </member>
        <member name="P:j6.Core.Country.Name">
            <summary>
            The country name
            </summary>
        </member>
        <member name="P:j6.Core.Country.ValidatePostalCode">
            <summary>
            validate postal code or not
            </summary>
        </member>
        <member name="P:j6.Core.Country.UseWorldAddressValidation">
            <summary>
            determines which style of validation to use within UI.
            </summary>
        </member>
        <member name="P:j6.Core.Country.InvoicesEnabled">
            <summary>
            Specifies whether this Country uses invoices or not, to turn features off/on in the UI.
            </summary>
        </member>
        <member name="T:j6.Core.CountryCurrency">
            <summary>
            Associated Country to Currency information
            </summary>
        </member>
        <member name="P:j6.Core.CountryCurrency.Country">
            <summary>
            The Country code
            </summary>
        </member>
        <member name="P:j6.Core.CountryCurrency.Currency">
            <summary>
            The Currency code
            </summary>
        </member>
        <member name="P:j6.Core.CountryCurrency.Primary">
            <summary>
            Primary currency flag
            </summary>
        </member>
        <member name="P:j6.Core.CountryCurrency.Active">
            <summary>
            Active Flag
            </summary>
        </member>
        <member name="P:j6.Core.CountryCurrency.Local">
            <summary>
            Local Currency flag
            </summary>
        </member>
        <member name="T:j6.Core.CountryProperty">
            <summary>
            Country property component
            </summary>
        </member>
        <member name="P:j6.Core.CountryProperty.Value">
            <summary>
            property value.
            </summary>
        </member>
        <member name="P:j6.Core.CountryProperty.CountryPropertyType">
            <summary>
            Country Property Type
            </summary>
        </member>
        <member name="P:j6.Core.CountryProperty.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="T:j6.Core.CountryPropertyType">
            <summary>
            CountryPropertyType
            </summary>
        </member>
        <member name="P:j6.Core.CountryPropertyType.MultipleValue">
            <summary>
            Allow have multiple value
            </summary>
        </member>
        <member name="T:j6.Core.Culture">
            <summary>
            Culture component
            </summary>
        </member>
        <member name="P:j6.Core.Culture.NativeCulture">
            <summary>
            NativeCulture
            </summary>
        </member>
        <member name="P:j6.Core.Culture.NativeLanguage">
            <summary>
            NativeCulture
            </summary>
        </member>
        <member name="P:j6.Core.Culture.TwoLetterISOLanguageName">
            <summary>
            TwoLetterISOLanguageName
            </summary>
        </member>
        <member name="P:j6.Core.Culture.ThreeLetterISOLanguageName">
            <summary>
            ThreeLetterISOLanguageName
            </summary>
        </member>
        <member name="P:j6.Core.Culture.ThreeLetterWindowsLanguageName">
            <summary>
            ThreeLetterWindowsLanguageName
            </summary>
        </member>
        <member name="T:j6.Core.Currency">
            <summary>
            Essential currency information.
            </summary>
        </member>
        <member name="F:j6.Core.Currency.GetFormat">
            <summary>
            Function to get the format for a given currency
            </summary>
        </member>
        <member name="F:j6.Core.Currency.GetDecimalPlaces">
            <summary>
            Function to get the number of decimal places a given currency
            </summary>
        </member>
        <member name="M:j6.Core.Currency.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:j6.Core.Currency.#ctor(System.String,System.Byte)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Currency.#ctor(System.String,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:j6.Core.Currency.Id">
            <summary>
            Internal identifier
            </summary>
        </member>
        <member name="P:j6.Core.Currency.DecimalPlaces">
            <summary>
            The number of significant decimal places for the currency.
            </summary>
        </member>
        <member name="P:j6.Core.Currency.DisplaySymbol">
            <summary>
            Specifies if the Symbol should be displayed
            </summary>
        </member>
        <member name="P:j6.Core.Currency.DisplayCode">
            <summary>
            Specifies if the Code should be displayed
            </summary>
        </member>
        <member name="P:j6.Core.Currency.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:j6.Core.Currency.FormatString">
            <summary>
            The string formatter ({0} is the amount, {1} is the currency code)
            </summary>
        </member>
        <member name="T:j6.Core.CurrencyDetail">
            <summary>
            Essential currency detail information.
            </summary>
        </member>
        <member name="P:j6.Core.CurrencyDetail.Identifier">
            <see cref="P:j6.Core.CodeComponent.Identifier"/>
        </member>
        <member name="P:j6.Core.CurrencyDetail.CanDelete">
            <summary>
            Can the currency be deleted?
            </summary>
        </member>
        <member name="T:j6.Core.DateInterval">
            <summary>
            DateInterval.
            </summary>
        </member>
        <member name="P:j6.Core.DateInterval.StartDate">
            <summary>
            Start date.
            </summary>
        </member>
        <member name="P:j6.Core.DateInterval.EndDate">
            <summary>
            End date.
            </summary>
        </member>
        <member name="T:j6.Core.Encode">
            <summary>
            Utility class responsible for encoding strings.
            </summary>
        </member>
        <member name="M:j6.Core.Encode.Hash(System.String,j6.Core.EncodingAlgorithm)">
            <summary>
            Hash the cleartext with md5.
            </summary>
            <param name="clearText">The cleartext of the string to be hashed.</param>
            <param name="algorithm">The algorithm to use</param>
            <returns>The hash of the clear text.</returns>
        </member>
        <member name="M:j6.Core.Encode.Verify(System.String,System.String,j6.Core.EncodingAlgorithm)">
            <summary>
            Verifies the cleartext against the hash using the selected algorithm.
            </summary>
            <param name="clearText">The cleartext of the string to be hashed.</param>
            <param name="hash">The hash to test</param>
            <param name="algorithm">The algorithm to use</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:j6.Core.EncodingAlgorithm" -->
        <member name="T:j6.Core.JenkonException">
            <summary>
            Exception for errors that occur in Jenkon applications
            </summary>
        </member>
        <member name="M:j6.Core.JenkonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="M:j6.Core.JenkonException.#ctor(System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="message">An informative error message</param>
        </member>
        <member name="M:j6.Core.JenkonException.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.JenkonException.#ctor(System.String,System.Exception)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.JenkonException.ToString">
            <summary>
            Includes the Guid for the exception.
            </summary>
        </member>
        <member name="P:j6.Core.JenkonException.Guid">
            <summary>
            Unique id for this exception
            </summary>
        </member>
        <member name="T:j6.Core.JenkonAggregateException`1">
            <summary>
            Aggregate Jenkon Exception
            </summary>
        </member>
        <member name="M:j6.Core.JenkonAggregateException`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor with InnerException
            </summary>
            <param name="innerExceptions"></param>
        </member>
        <member name="P:j6.Core.JenkonAggregateException`1.InnerExceptions">
            <summary>
            Exceptions that caused this exception to be thrown
            </summary>
        </member>
        <member name="P:j6.Core.JenkonAggregateException`1.Guid">
            <summary>
            Unique id for this exception
            </summary>
        </member>
        <member name="T:j6.Core.KeyNotUniqueException`1">
            <summary>
            Exception thrown when a given code is not unique.
            </summary>
        </member>
        <member name="M:j6.Core.KeyNotUniqueException`1.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.KeyNotUniqueException`1.#ctor(`0)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.KeyNotUniqueException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.KeyNotUniqueAggregateException`1">
            <summary>
            Exception thrown when a given code is not unique.
            </summary>
        </member>
        <member name="M:j6.Core.KeyNotUniqueAggregateException`1.#ctor(System.Collections.Generic.IEnumerable{j6.Core.KeyNotUniqueException{`0}})">
            <summary>
            Vectorized constructor
            </summary>
        </member>
        <member name="M:j6.Core.KeyNotUniqueAggregateException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Needed for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:j6.Core.CodeNotUniqueException">
            <summary>
            Exception thrown when a given code is not unique.
            </summary>
        </member>
        <member name="M:j6.Core.CodeNotUniqueException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.CodeNotUniqueException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.CodeNotUniqueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.CodeNotUniqueAggregateException">
            <summary>
            Aggregate version of CodeNotUniqueException
            </summary>
        </member>
        <member name="M:j6.Core.CodeNotUniqueAggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Needed for serialization
            </summary>
        </member>
        <member name="M:j6.Core.CodeNotUniqueAggregateException.#ctor(System.Collections.Generic.IEnumerable{j6.Core.KeyNotUniqueException{System.String}})">
            <summary>
            Constructor to include InnerExceptions
            </summary>
        </member>
        <member name="T:j6.Core.EmptyStringException">
            <summary>
            Thrown when a string is empty or null
            </summary>
        </member>
        <member name="M:j6.Core.EmptyStringException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.EmptyStringException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
            <param name="message">exception message</param>
        </member>
        <member name="M:j6.Core.EmptyStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.NoSuchObjectException">
            <summary>
            Thrown when an object does not exist in the database
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchObjectException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchObjectException.#ctor(System.String,System.Type)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchObjectException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchObjectException.#ctor(System.String,System.Exception)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="T:j6.Core.NoSuchCountryException">
            <summary>
            Type-specific extension of ObjectDoesNotExistException
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchCountryException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchCountryException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchCountryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.NoSuchLanguageException">
            <summary>
            Type-specific extension of ObjectDoesNotExistException
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchLanguageException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchLanguageException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoSuchLanguageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.ComponentNotUniqueException">
            <summary>
            Component not unique
            </summary>
        </member>
        <member name="M:j6.Core.ComponentNotUniqueException.#ctor(System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="message">An informative error message</param>
        </member>
        <member name="M:j6.Core.ComponentNotUniqueException.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.ComponentNotUniqueException.#ctor(System.String,System.Exception)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.ComponentNotUniqueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.CodeNullException">
            <summary>
            Thrown when a null or empty code is received.
            </summary>
        </member>
        <member name="M:j6.Core.CodeNullException.#ctor">
            <summary>
            Default, messageless constructor.
            </summary>
        </member>
        <member name="M:j6.Core.CodeNullException.#ctor(System.String)">
            <summary>
            Creates preset message from the argument name given.
            </summary>
            <param name="argumentName"></param>
        </member>
        <member name="M:j6.Core.CodeNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.IdentifierException">
            <summary>
            Thrown when an error occurs while trying to generate and identifier
            </summary>
        </member>
        <member name="M:j6.Core.IdentifierException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.IdentifierException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
            <param name="message">exception message</param>
        </member>
        <member name="M:j6.Core.IdentifierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.NoIdentifierAvailableException">
            <summary>
            Exception for No Identifier Available
            </summary>
        </member>
        <member name="M:j6.Core.NoIdentifierAvailableException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoIdentifierAvailableException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoIdentifierAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.NoGeneratorDefinedException">
            <summary>
            Exception for No Generator Defined
            </summary>
        </member>
        <member name="M:j6.Core.NoGeneratorDefinedException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoGeneratorDefinedException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoGeneratorDefinedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.NoGeneratorMatchException">
            <summary>
            Exception for No Generator Match
            </summary>
        </member>
        <member name="M:j6.Core.NoGeneratorMatchException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoGeneratorMatchException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.NoGeneratorMatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.InstantiationException">
            <summary>
            Thrown when an error occurs while trying to Instantiate a class
            </summary>
        </member>
        <member name="M:j6.Core.InstantiationException.#ctor">
            <summary>
            public constructor
            </summary>
        </member>
        <member name="M:j6.Core.InstantiationException.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
            <param name="message">exception message</param>
        </member>
        <member name="M:j6.Core.InstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.InstantiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:j6.Core.TableFieldKey">
            <summary>
            Table field Key
            </summary>
        </member>
        <member name="M:j6.Core.TableFieldKey.HasValue">
            <summary>Determine if both paired strings have a value</summary>
        </member>
        <member name="P:j6.Core.TableFieldKey.Table">
            <summary>Table include schema (aka First)</summary>
        </member>
        <member name="P:j6.Core.TableFieldKey.Field">
            <summary>Field name (aka Second)</summary>
        </member>
        <member name="T:j6.Core.FieldComponent">
            <summary>
            Field
            </summary>
        </member>
        <member name="M:j6.Core.FieldComponent.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.FieldComponent.Table">
            <summary>
            CartType code
            </summary>
        </member>
        <member name="P:j6.Core.FieldComponent.Field">
            <summary>
            Plan transaction
            </summary>
        </member>
        <member name="P:j6.Core.FieldComponent.Key">
            <summary>
            TableFieldKey
            </summary>
        </member>
        <member name="P:j6.Core.FieldComponent.ControlPath">
            <summary>
            ControlPatch
            </summary>
        </member>
        <member name="P:j6.Core.FieldComponent.Regex">
            <summary>
            Regex
            </summary>
        </member>
        <member name="T:j6.Core.Frequency">
            <summary>
            Frequency component
            </summary>
        </member>
        <member name="P:j6.Core.Frequency.Month">
            <summary>
            Number Month
            </summary>
        </member>
        <member name="T:j6.Core.GeoCode">
            <summary>
            A specific city/state/county taxing jurisdiciton
            </summary>
        </member>
        <member name="P:j6.Core.GeoCode.Code">
            <summary>
            The geocode id
            </summary>
        </member>
        <member name="P:j6.Core.GeoCode.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:j6.Core.GeoCode.State">
            <summary>
            State or Province
            </summary>
        </member>
        <member name="P:j6.Core.GeoCode.County">
            <summary>
            County, if applicable
            </summary>
        </member>
        <member name="T:j6.Core.HoldCode">
            <summary>
            Hold code information
            </summary>
        </member>
        <member name="T:j6.Core.IActiveRepository`1">
            <summary>
            Generic interface for repositories that work with IActive components.
            </summary>
            <typeparam name="TComponent">Component object to process</typeparam>
        </member>
        <member name="M:j6.Core.IActiveRepository`1.GetByActive(System.Boolean)">
            <summary>
            Get component by active flag.
            </summary>
            <param name="active">Boolean.</param>
            <returns>Array of component objects</returns>
        </member>
        <member name="T:j6.Core.IAddressFlow">
            <summary>
            Interface for managing Address objects.
            </summary>
        </member>
        <member name="M:j6.Core.IAddressFlow.ValidateAddress(j6.Core.Address)">
            <summary>
            Validate address.
            </summary>		
        </member>
        <member name="M:j6.Core.IAddressFlow.Ensure(j6.Core.Address)">
            <summary>
            Ensures that the given address exists in the database.
            </summary>
        </member>
        <member name="M:j6.Core.IAddressFlow.CityLookupList(System.String,System.String)">
            <summary>
            city look up by postal code
            </summary>
        </member>
        <member name="M:j6.Core.IAddressFlow.PostalCodeLookupList(System.String,System.String)">
            <summary>
            postal code look up by postal code
            </summary>
        </member>
        <member name="M:j6.Core.IAddressFlow.StateLookupList(System.String,System.String)">
            <summary>
            postal code look up by postal code
            </summary>
        </member>
        <member name="M:j6.Core.IAddressFlow.FindAddressMatches(j6.Core.Address)">
            <summary>
            Finds a list of partial addresse based on a partial address.
            Note:  must set the AddressMatches parameters for which address fields to use.
            </summary>
            <param name="partialAddress">This is a full or partial address that we want to match against.</param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IAddressFlow.Clone(j6.Core.Address)">
            <summary>
            Copy address.
            </summary>
        </member>
        <member name="T:j6.Core.IAlternateCodeTypeFlow">
            <summary>
            CRUD of Alternate Code Type 
            </summary>
        </member>
        <member name="T:j6.Core.IApplicationFlow">
            <summary>
            Tracks the different applactions that the system uses
            </summary>
        </member>
        <member name="P:j6.Core.IApplicationFlow.CurrentApplication">
            <summary>
            Sets current application based on what site you are on 
            </summary>
        </member>
        <member name="P:j6.Core.IApplicationFlow.IsEmployeePortal">
            <summary>
            Application is employee portal or not
            </summary>
        </member>
        <member name="P:j6.Core.IApplicationFlow.IsConsultantPortal">
            <summary>
            Application is consultant portal or not
            </summary>
        </member>
        <member name="P:j6.Core.IApplicationFlow.IsPWS">
            <summary>
            Application is pws or not
            </summary>
        </member>
        <member name="T:j6.Core.IAppSettingFlow">
            <summary>
            Interface for the app setting flow
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingFlow.GetValue(System.String)">
            <summary>
            Returns the value for the given setting. If the value is not found,
            an exception is thrown.
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingFlow.SetOverride(System.String,System.Object)">
            <summary>
            Sets the override value.
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingFlow.GetAll">
            <summary>
            Returns information about available appsettings.
            </summary>
        </member>
        <member name="T:j6.Core.AppSettingLevel">
            <summary>
            Level of the app setting value
            </summary>
        </member>
        <member name="T:j6.Core.IAppSettingRepository">
            <summary>
            Repository for j6 App Settings
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingRepository.GetAll">
            <summary>
            Gets all the app settings for j6
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingRepository.SetOverride(System.String,System.Object)">
            <summary>
            Sets the override value for the specified app setting key
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingRepository.GetByName(System.String)">
            <summary>
            Gets the app setting by name
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingRepository.SetValues(System.Collections.Generic.IEnumerable{j6.Core.AppSetting},j6.Core.AppSettingLevel)">
            <summary>
            Sets multiple app settings with the specified level and returns the result of the set operation
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingRepository.SetValue(System.String,System.Object,j6.Core.AppSettingLevel,System.String,System.String)">
            <summary>
            Sets the value of the specified app setting key at the specified level
            </summary>
        </member>
        <member name="M:j6.Core.IAppSettingRepository.Exists(System.String)">
            <summary>
            Returns true if an app setting with the specified key exists
            </summary>
        </member>
        <member name="T:j6.Core.IBrowserInfoFlow">
            <summary>
            Interface for managing BrowserInfo objects.
            </summary>
        </member>
        <member name="M:j6.Core.IBrowserInfoFlow.GetByAccount(System.String)">
            <summary>
            Get a list of BrowserInfos filtered by an Account
            </summary>
        </member>
        <member name="T:j6.Core.ICache">
            <summary>
            Interface for caches.
            </summary>
        </member>
        <member name="M:j6.Core.ICache.Remove(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            removes an item from the cache and 
            </summary>
            <param name="context">The name of the context in which the key/value pair exists</param>
            <param name="keys"> </param>
        </member>
        <member name="M:j6.Core.ICache.Set(System.String,System.Tuple{System.String,System.Object}[],System.Runtime.Caching.CacheItemPolicy,j6.Core.CacheMode)">
            <summary>
            Sets values into the cache
            </summary>
        </member>
        <member name="M:j6.Core.ICache.Set(System.String,System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,j6.Core.CacheMode)">
            <summary>
            Set a single value into the cache
            </summary>
        </member>
        <member name="M:j6.Core.ICache.GetByKeys(System.String,System.Collections.Generic.IEnumerable{System.String},j6.Core.CacheMode)">
            <summary>
            Returns one object per key. If the key was not found, the value
            in that position will be null.
            </summary>
        </member>
        <member name="M:j6.Core.ICache.Clear">
            <summary>
            Removes all entries
            </summary>
        </member>
        <member name="T:j6.Core.ICacheFlow">
            <summary>
            A simple caching interface which can be implemented to hang on
            to values for future fast lookup
            </summary>
        </member>
        <member name="M:j6.Core.ICacheFlow.Add(System.String,System.String,System.Object)">
            <summary>
            Add an item to the cache
            </summary>
            <param name="context">The context in which this key/value pair exists.</param>
            <param name="key">The name of the value</param>
            <param name="value">The actual value to cache</param>
        </member>
        <member name="M:j6.Core.ICacheFlow.Lookup(System.String,System.String)">
            <summary>
            Lookup an item in the cache, returns null if not found
            </summary>
            <param name="context">The name of the context in which the key/value pair exists</param>
            <param name="key">The name of the value</param>
            <returns>The value of the key within the context, or null if it does not ext</returns>
        </member>
        <member name="M:j6.Core.ICacheFlow.Clear(System.String)">
            <summary>
            clears out the content of the given context's cache
            </summary>
            <param name="context">the name of the context to clear out</param>
        </member>
        <member name="M:j6.Core.ICacheFlow.Add(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            <see cref="M:j6.Core.ICacheFlow.Add(System.String,System.String,System.Object)"/>
            </summary>
            <param name="context">The context in which this key/value pair exists.</param>
            <param name="key">The name of the value</param>
            <param name="value">The actual value to cache</param>
            <param name="duration">Time interval for this value</param>
        </member>
        <member name="M:j6.Core.ICacheFlow.Add(System.String,System.String,System.Object,System.DateTimeOffset,System.TimeSpan,System.Runtime.Caching.CacheEntryRemovedCallback,j6.Core.CacheMode)">
            <summary>
            <see cref="M:j6.Core.ICacheFlow.Add(System.String,System.String,System.Object)"/>
            </summary>
            <param name="context">The context in which this key/value pair exists.</param>
            <param name="key">The name of the value</param>
            <param name="value">The actual value to cache</param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
            <param name="cacheItemRemovedCallback"></param>
            <param name="cacheMode"></param>
        </member>
        <member name="M:j6.Core.ICacheFlow.Get(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns one object per key. If the key was not found, the value
            in that position will be null.
            </summary>
        </member>
        <member name="T:j6.Core.OperationErrorMode">
            <summary>
            Defines the behavior when a batch operation fails
            </summary>
        </member>
        <member name="F:j6.Core.OperationErrorMode.FailOnFirstError">
            <summary>
            The entire operation should fail as soon as one element of the batch fails
            </summary>
        </member>
        <member name="T:j6.Core.IValidateConfiguration">
            <summary>
            Interface for things that validate configuration data
            </summary>
        </member>
        <member name="M:j6.Core.IValidateConfiguration.Validate(j6.Core.Configuration)">
            <summary>
             Validates the given configuration.
            </summary>
        </member>
        <member name="T:j6.Core.SystemEventArgs">
            <summary>
            Generic events fired by services
            </summary>
        </member>
        <member name="M:j6.Core.SystemEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:j6.Core.SystemEventArgs.EventType">
            <summary>
            The event type, e.g. Account-Updated or Country-Created.
            </summary>
        </member>
        <member name="P:j6.Core.SystemEventArgs.Payload">
            <summary>
            The object that was affect, e.g. an Account or Country.
            </summary>
        </member>
        <member name="T:j6.Core.IWorkflow">
            <summary>
            Base interface for workflows
            </summary>
        </member>
        <member name="T:j6.Core.AuditMode">
            <summary>
            Audit Mode
            </summary>
        </member>
        <member name="F:j6.Core.AuditMode.AUDIT_USER_PROFILE">
            <summary>
            Audit and profile
            </summary>
        </member>
        <member name="F:j6.Core.AuditMode.PROFILE">
            <summary>
            Profile only
            </summary>
        </member>
        <member name="F:j6.Core.AuditMode.AUDIT_USER">
            <summary>
            Audit user 
            </summary>
        </member>
        <member name="F:j6.Core.AuditMode.NO_AUDIT">
            <summary>
            No audit
            </summary>
        </member>
        <member name="T:j6.Core.IConnectionFactory">
            <summary>
            Connection service.
            </summary>
        </member>
        <member name="M:j6.Core.IConnectionFactory.Connect(j6.Core.AuditMode)">
            <summary>
            Returns an open connection to the database.
            </summary>
            <returns>An open connection to the database</returns>
        </member>
        <member name="M:j6.Core.IConnectionFactory.ConnectAsync(j6.Core.AuditMode)">
            <summary>
            Returns an open connection to the database.
            </summary>
            <returns>An open connection to the database</returns>
        </member>
        <member name="M:j6.Core.IConnectionFactory.ConnectReportingAsync">
            <summary>
            Returns an open connection to the reporting database.
            </summary>
            <returns>An open connection to the reporting database</returns>
        </member>
        <member name="T:j6.Core.ICountryCurrencyFlow">
            <summary>
            Interface for managing Country to Currency association.
            </summary>
        </member>
        <member name="M:j6.Core.ICountryCurrencyFlow.GetByCountry(System.String)">
            <summary>
            Returns all the countrycurrency components for the given country.
            </summary>
        </member>
        <member name="M:j6.Core.ICountryCurrencyFlow.GetActiveByCountry(System.String)">
            <summary>
            Returns all the active CountryCurrency components for the given country.
            </summary>
        </member>
        <member name="M:j6.Core.ICountryCurrencyFlow.GetPrimaryCurrencyCode(System.String)">
            <summary>
            Get primary currency code for given country.
            </summary>
        </member>
        <member name="M:j6.Core.ICountryCurrencyFlow.GetDeletable">
            <summary>
            Returns the country currencies which are deletable
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.ICountryCurrencyFlow.GetLocalCurrency(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets local currency (if there is one), otherwise the primary currency (if there is one), otherwise the first currency for the specified country
            </summary>
            <param name="country">The specified country</param>
            <param name="currencyOptions">Optional list of currencies to limit the results</param>
            <returns>local currency (if there is one), otherwise the primary currency (if there is one), otherwise the first currency for the specified country</returns>
        </member>
        <member name="M:j6.Core.ICountryCurrencyFlow.GetTransactionCurrency(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets local currency (if there is one), otherwise the first currency for the specified country
            </summary>
            <param name="country">The specified country</param>
            <param name="currencyOptions">Optional list of currencies to limit the results</param>
            <returns>local currency (if there is one), otherwise the first currency for the specified country</returns>
        </member>
        <member name="M:j6.Core.ICountryCurrencyFlow.GetAllForUser">
            <summary>
            Gets all the country currencies this user is permitted to view
            </summary>
            <returns>The CountryCurrencies this user is permitted to view</returns>
        </member>
        <member name="T:j6.Core.ICountryFlow">
            <summary>
            Interface for managing Country objects.
            </summary>
        </member>
        <member name="M:j6.Core.ICountryFlow.GetDeletable">
            <summary>
            Gets the countries which can be deleted
            </summary>
            <returns>Countries which can be deleted</returns>
        </member>
        <member name="M:j6.Core.ICountryFlow.GetAllInvoicesEnabled">
            <summary>
            Gets the countries which have Invoices Enabled
            </summary>
            <returns>Countries which have Invoices Enabled</returns>
        </member>
        <member name="M:j6.Core.ICountryFlow.GetAllForUser">
            <summary>
            Get all countries for the currenct user        
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.ICountryFlow.GetAllForUser(j6.Core.User)">
            <summary>
            Get all countries given a user
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.ICountryFlow.GetAllByUserCode(System.String)">
            <summary>
            Get all countries for given user code
            </summary>
            <returns></returns>
        </member>
        <member name="T:j6.Core.ICountryPropertyFlow">
            <summary>
            ICountryPropertyFlow
            </summary>
        </member>
        <member name="M:j6.Core.ICountryPropertyFlow.GetByCountry(System.String)">
            <summary>
            Get properties by country
            </summary>
        </member>
        <member name="M:j6.Core.ICountryPropertyFlow.GetByPropertyTypeCountry(System.String,System.String)">
            <summary>
            Get properties by property type and country 
            </summary>
        </member>
        <member name="M:j6.Core.ICountryPropertyFlow.Exists(j6.Core.CountryProperty)">
            <summary>
            if there exists a component of same property type and country 
            </summary>
        </member>
        <member name="T:j6.Core.ICountryPropertyTypeFlow">
            <summary>
            ICountryPropertyTypeFlow
            </summary>
        </member>
        <member name="T:j6.Core.ISystemRepository`1">
            <summary>
            Generic interface for repositories that work with ISystem components.
            </summary>
        </member>
        <member name="M:j6.Core.ISystemRepository`1.GetBySystem(System.Boolean,System.Boolean)">
            <summary>
            Get component by system flag.
            </summary>
        </member>
        <member name="T:j6.Core.ICultureFlow">
            <summary>
            ICultureFlow
            </summary>
        </member>
        <member name="M:j6.Core.ICultureFlow.GetAllActive">
            <summary>
            Get all active 
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.ICultureFlow.GetAllActiveByCountry(System.String)">
            <summary>
            Get all active and filter by country. If no country configuration 
            has been supplied, then all active will be used instead.
            </summary>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.ICultureFlow.GetPrimaryByCountry(System.String)">
            <summary>
            Get the primary culture for a given country. If no country configuration
            has been supplied then value is null
            </summary>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.ICultureFlow.ValidCultureByCountry(System.String,System.String)">
            <summary>
            Determines whether or not the supplied culture is valid for the supplied country.
            </summary>
            <param name="country"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:j6.Core.ICurrencyFlow">
            <summary>
            Interface for managing Currency objects.
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.GetAllCurrencyDetail">
            <summary>
            <see cref="M:j6.Core.ICurrencyFlow.GetAllCurrencyDetail"/>
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.GetByCountry(System.String)">
            <summary>
            Get all currencies for specified country
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.Parse(System.String,System.String)">
            <summary>
            Parses the string amount with the current threads
            UI culture number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the string amount with the cultureInfo number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.Parse(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Parses the string amount with the cultureInfo number format 
            by first stripping off the symbol and iso specified by currency
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.FormatDecimal(System.Decimal)">
            <summary>
            Formats the decimal to 2 decimals with the 
            current threads UI culture number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.FormatDecimal(System.Decimal,System.String)">
            <summary>
            Formats the decimal to the number of decimal places
            specified by the currency with the current 
            threads UI culture number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.FormatDecimal(j6.Core.Money)">
            <summary>
            Formats the decimal to the number of decimal places
            specified by the currency with the current 
            threads UI culture number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.FormatDecimal(System.Decimal,System.Int32)">
            <summary>
            Formats the decimal to the number of decimal places 
            specified by the decimal parameter with the current 
            threads UI culture number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.FormatDecimal(System.Decimal,System.Globalization.CultureInfo)">
            <summary>
            Formats the decimal using the cultureInfo number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.Format(System.Decimal)">
            <summary>
            Formats the currency to 2 decimals with the 
            current threads UI culture number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.Format(System.Decimal,System.String)">
            <summary>
            Formats the currency to the number of decimal places
            specified by the currency with the current, using the symbol 
            and ISO code specified by the currency, and honoring the 
            DisplaySymbol and DisplayCode flags 
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.Format(System.Decimal,System.Int32)">
            <summary>
            Formats the currency to the number of decimal places 
            specified by the decimal parameter with the current 
            threads UI culture number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.Format(System.Decimal,System.Globalization.CultureInfo)">
            <summary>
            Formats the currency using the cultureInfo number format
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.InitializeCurrencyFormats">
            <summary>
            Loads the currency formats into memory for money localization
            </summary>
        </member>
        <member name="M:j6.Core.ICurrencyFlow.GetDeletable">
            <summary>
            Returns the currencies that may be safely deleted
            </summary>
            <returns></returns>
        </member>
        <member name="T:j6.Core.IEntity">
            <summary>
            Components that support generic operations like tagging
            </summary>
        </member>
        <member name="P:j6.Core.IEntity.Entity">
            <summary>
            A unique identifier across space and time...
            </summary>
        </member>
        <member name="T:j6.Core.IFactory`1">
            <summary>
             Generic interface to produce an object on demand.
            </summary>
            <typeparam name="T">The type of the object to produce</typeparam>
        </member>
        <member name="M:j6.Core.IFactory`1.GetInstance">
            <summary>
            Return an instance of T
            </summary>
        </member>
        <member name="T:j6.Core.IFieldFlow">
            <summary>
            IFieldFlow
            </summary>
        </member>
        <member name="M:j6.Core.IFieldFlow.GetByTable(System.String)">
            <summary>
            Get fields by table (full table name).
            </summary>
        </member>
        <member name="T:j6.Core.IFrequencyFlow">
            <summary>
            IFrequencyFlow
            </summary>
        </member>
        <member name="M:j6.Core.IFrequencyFlow.GetActiveByCountry(System.String)">
            <summary>
            Get active frequency by country
            </summary>
        </member>
        <member name="T:j6.Core.IHoldCodeFlow">
            <summary>
            Operations on hold codes defined in the system
            </summary>
        </member>
        <member name="T:j6.Core.IIdentifierGeneratorFlow">
            <summary>
            Defines the interface for which string resources can be looked up.
            </summary>
        </member>
        <member name="M:j6.Core.IIdentifierGeneratorFlow.CreateIdentifier(System.Object)">
            <summary>
            Creates and returns an Identifier based upon the type of object passed in.
            </summary>
            <param name="o">
            The object that will determine which identifier implementation to use.
            </param>
            <returns>An identifier.</returns>
        </member>
        <member name="M:j6.Core.IIdentifierGeneratorFlow.CreateIdentifiers(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates and returns Identifiers based upon the type of objects passed in.
            </summary>
            <param name="o">
            The objects that will determine which identifier implementation to use.
            </param>
            <returns>An enumeration of identifiers.</returns>
        </member>
        <member name="M:j6.Core.IIdentifierGeneratorFlow.AssignIdentifiers(j6.Core.IKey{System.String}[])">
            <summary>
            Assigns the values from the CreateIdentifiers to the objects specified
            </summary>
        </member>
        <member name="M:j6.Core.IIdentifierGeneratorFlow.GetSequenceNumber(j6.Core.Code,System.Nullable{System.Char})">
            <summary>
            Returns the next value from the sequence number generator, which must
            exist.
            </summary>
        </member>
        <member name="M:j6.Core.IIdentifierGeneratorFlow.GetSequenceNumberRange(j6.Core.Code,System.Collections.Generic.IEnumerable{j6.Core.Padding})">
            <summary>
            Returns the next range of values from the sequence number generator, which must
            exist.
            </summary>
        </member>
        <member name="M:j6.Core.IIdentifierGeneratorFlow.GetRandomNumber(j6.Core.Code,System.Nullable{System.Char})">
            <summary>
            Returns an unused random number from the given range, which must exist.
            </summary>
        </member>
        <member name="T:j6.Core.Padding">
            <summary>
            Padding for sequence number
            </summary>
        </member>
        <member name="P:j6.Core.Padding.Target">
            <summary>
            object that sequence number generate again
            </summary>
        </member>
        <member name="P:j6.Core.Padding.Length">
            <summary>
            Padding Length
            </summary>
        </member>
        <member name="P:j6.Core.Padding.Char">
            <summary>
            Padding Char
            </summary>
        </member>
        <member name="T:j6.Core.IIdentity">
            <summary>
            IIdentity interface
            </summary>
        </member>
        <member name="M:j6.Core.IIdentity.GetIdentity">
            <summary>
            Get identity
            </summary>
            <returns>System.Security.Principal.IIdentity</returns>
        </member>
        <member name="T:j6.Core.WindowsIdentity">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="M:j6.Core.WindowsIdentity.GetIdentity">
            <see cref="M:j6.Core.IIdentity.GetIdentity"/>
        </member>
        <member name="T:j6.Core.IIsoCountryFlow">
            <summary>
            Interface for managing IsoCountry objects.
            </summary>
        </member>
        <member name="M:j6.Core.IIsoCountryFlow.GetByAlternateCode(System.String)">
            <summary>
            Retrieves a particular IsoCountry from the system via an Alternate Code.
            The Alternate Code is used to interface with systems that do not use the
            ISO standard as their code.
            </summary>
            <param name="alternateCode">The alternate code to search for</param>
            <returns>A List of matching IsoCountrys</returns>
        </member>
        <member name="M:j6.Core.IIsoCountryFlow.GetAllNotInUse">
            <summary>
            Retrieves a list of IsoCountries that not in use by the ststem. 
            </summary>
            <returns>A List of IsoCountrys</returns>
        </member>
        <member name="T:j6.Core.ILogService">
            <summary>
            Logging services
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.IsDebugEnabled">
            <summary>
            Is trace level at Debug?
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Debug(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            Write a Debug message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Debug(System.String,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Write a Debug message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Debug(System.String,System.String,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Write a Debug message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Info(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            Write an Information message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Info(System.String,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Write an Information message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Info(System.String,System.String,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Write an Information message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Warn(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            Write a Warning message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Warn(System.String,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Write a Warning message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Warn(System.String,System.String,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Write a Warning message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Error(System.String,System.String,System.Exception,System.Object[])">
            <summary>
            Write an Error message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Error(System.String,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Write an Error message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Error(System.String,System.String,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Write an Error message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.Start(System.String,System.String)">
            <summary>
            Write a start message.
            </summary>
        </member>
        <member name="M:j6.Core.ILogService.End(System.String,System.String)">
            <summary>
            Write an end message.
            </summary>
        </member>
        <member name="P:j6.Core.ILogService.AccountCode">
            <summary>
            Account code.
            </summary>
        </member>
        <member name="T:j6.Core.IMessageFlow">
            <summary>
            IMessageFlow
            </summary>
        </member>
        <member name="M:j6.Core.IMessageFlow.SendMessage(j6.Core.Message)">
            <summary>
            send message.
            </summary>
        </member>
        <member name="M:j6.Core.IMessageFlow.SendMessageAsync(j6.Core.Message)">
            <summary>
            send message.
            </summary>
        </member>
        <member name="M:j6.Core.IMessageFlow.SendTemplatedEmail(System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Retrieves template, subtitutes the subject with substitutions specified in subjectReplacements, 
            substitutes the body with substitutions specified in bodyReplacements, uses resources for specified culture,
            and sends it to the entity specified with the to parameter, with the from specified by the from paramter
            </summary>
        </member>
        <member name="M:j6.Core.IMessageFlow.SendTemplatedEmail(j6.Core.Template,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Boolean,System.String)">
            <summary>
            For the supplied template, subtitutes the subject with substitutions specified in subjectReplacements, 
            substitutes the body with substitutions specified in bodyReplacements, uses resources for specified culture,
            and sends it to the entity specified with the to parameter, with the from specified by the from paramter
            </summary>
        </member>
        <member name="M:j6.Core.IMessageFlow.SendTemplatedEmailAsync(System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Retrieves template, subtitutes the subject with substitutions specified in subjectReplacements, 
            substitutes the body with substitutions specified in bodyReplacements, uses resources for specified culture,
            and sends it to the entity specified with the to parameter, with the from specified by the from paramter
            </summary>
        </member>
        <member name="T:j6.Core.IMessageTypeFlow">
            <summary>
            IMessageTypeFlow
            </summary>
        </member>
        <member name="T:j6.Core.IPermissionFlow">
            <summary>
            IPermissionFlow
            </summary>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryAccountPermission(System.String,System.String)">
            <summary>
            Query permission of an account account code and permission code.
            Will Get the union of all permissions inherited from the 'Everyone' role,
            the account, account class, and the application
            </summary>	
            <param name="account">The Account Code</param>
            <param name="permission">The Permission Requested</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryAccountPermission(System.String,System.String,System.Boolean)">
            <summary>
            Query permission of an account account code and permission code.
            Will Get the union of all permissions inherited from the 'Everyone' role,
            the account, account class, and the application
            </summary>	
            <param name="account">The Account Code</param>
            <param name="permission">The Permission Requested</param>
            <param name="defaultValue">The default value if the permission hasn't been defined in the system</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserPermission(System.String,System.String)">
            <summary>
            Query permission of an user for by user code and permission code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, and the application
            </summary>
            <param name="user">The User Code</param>
            <param name="permission">The Permission Requested</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserPermission(System.String,System.String,System.Boolean)">
            <summary>
            Query permission of an user for by user code and permission code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, and the application
            </summary>
            <param name="user">The User Code</param>
            <param name="permission">The Permission Requested</param>
            <param name="defaultValue">The default value if the permission hasn't been defined in the system</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserAccountClassPermission(System.String,System.String,System.String)">
            <summary>
            Query permission of a user by user code, permission code, and accountClass code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, account class, and the application
            </summary>
            <param name="userCode">The User Code</param>
            <param name="accountClassCode">The Account Class Code</param>
            <param name="permissionCode">The Permission Requested</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserAccountClassPermission(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Query permission of a user by user code, permission code, and accountClass code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, account class, and the application
            </summary>
            <param name="userCode">The User Code</param>
            <param name="accountClassCode">The Account Class Code</param>
            <param name="permissionCode">The Permission Requested</param>
            <param name="defaultValue">The default value if the permission hasn't been defined in the system</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserAccountPermission(System.String,System.String,System.String)">
            <summary>
            Query permission of an user and account by user code, account code, and permission code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, account, account class, and the application
            </summary>
            <param name="userCode">The User Code</param>
            <param name="accountCode">The Account Class Code</param>
            <param name="permissionCode">The Permission Requested</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserAccountPermission(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Query permission of an user and account by user code, account code, and permission code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, account, account class, and the application
            </summary>
            <param name="userCode">The User Code</param>
            <param name="accountCode">The Account Class Code</param>
            <param name="permissionCode">The Permission Requested</param>
            <param name="defaultValue">The default value if the permission hasn't been defined in the system</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryAccountPermissions(System.String)">
            <summary>
            Query granted permissions of an account by an account code.
            Will Get the union of all permissions inherited from the 'Everyone' role,
            the account, account class, and the application
            </summary>	
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserPermissions(System.String)">
            <summary>
            Query granted permissions of a user by a user code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, and the application
            </summary>
        </member>
        <member name="M:j6.Core.IPermissionFlow.GetUserPermissionsHashCode(System.String)">
            <summary>
            Query granted permissions of a user by a user code to generate a HashCode.
            </summary>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserAccountClassPermissions(System.String,System.String)">
            <summary>
            Query granted permissions of a user by a user code and and account class code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, account class, and the application
            </summary>
        </member>
        <member name="M:j6.Core.IPermissionFlow.QueryUserAccountPermissions(System.String,System.String)">
            <summary>
            Query granted permissions of a user and account by a user code and an account code.
            Will Get the union of all permissions inherited from the 'Everyone' role, 
            the user, user account, user account class, account, account class, and the application
            </summary>
        </member>
        <member name="M:j6.Core.IPermissionFlow.UserDemand(System.String)">
            <summary>
            User must have the specified permission. If the permission does not exist,
            then the user is treated as if they did have it.
            </summary>
        </member>
        <member name="M:j6.Core.IPermissionFlow.UserDemandStrict(System.String)">
            <summary>
            User must have the specified permission. If the permission does not exist,
            an exception is thrown.
            </summary>
        </member>
        <member name="M:j6.Core.IPermissionFlow.UserGranted(System.String)">
            <summary>
            Check if the current user has granted permission
            </summary>
        </member>
        <member name="M:j6.Core.IPermissionFlow.UserGranted(System.String,System.Boolean)">
            <summary>
            Check if the current user has granted permission
            </summary>
            <param name="permission">The Permission Requested</param>
            <param name="defaultValue">The default value if the permission hasn't been defined in the system</param>
        </member>
        <member name="M:j6.Core.IPermissionFlow.AssignRolesToPermission(System.String,System.String[],System.Boolean)">
            <summary>
            Creates a new permission and assign a role to it
            </summary>
            <param name="permissionCode"></param>
            <param name="roles"></param>
            <param name="clearBeforeAdd"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IPermissionFlow.RemoveCache(System.String,System.String)">
            <summary>
            Remove cache for user and account
            </summary>
        </member>
        <member name="T:j6.Core.ICodePermissionFlow`1">
            <summary>
            Code Permission Flow
            </summary>
        </member>
        <member name="M:j6.Core.ICodePermissionFlow`1.RemoveDeniedEntities(System.Collections.Generic.List{`0})">
            <summary>
            Accepts a list of code components, looks up permissions, and filters out any components that have a grant set to false
            </summary>
        </member>
        <member name="M:j6.Core.ICodePermissionFlow`1.GetIntersectionFromPermissions(System.Collections.Generic.List{`0})">
            <summary>
            Accepts a list of code components, looks up permissions, and gets the intersection of the codeComponents list and the 
            list of permissions that whose name start with the Type Name of T.  As an example, if List&lt;T&gt; contains PaymentType objects, 
            the list of permissions being compared to is permissions with names that start with 'PaymentType'.
            </summary>
        </member>
        <member name="T:j6.Core.PermissionCode">
            <summary>
            Permission code
            </summary>
        </member>
        <member name="F:j6.Core.PermissionCode.Sponsor">
            <summary>
            be a sponsor
            </summary>
        </member>
        <member name="F:j6.Core.PermissionCode.Title">
            <summary>
            have title
            </summary>
        </member>
        <member name="F:j6.Core.PermissionCode.PersonalSite">
            <summary>
            own pws
            </summary>
        </member>
        <member name="F:j6.Core.PermissionCode.AutoShip">
            <summary>
            have auto ship
            </summary>
        </member>
        <member name="F:j6.Core.PermissionCode.Content">
            <summary>
            manage content
            </summary>
        </member>
        <member name="F:j6.Core.PermissionCode.AdjustVolume">
            <summary>
            Adjust volume
            </summary>
        </member>
        <member name="F:j6.Core.PermissionCode.AdjustEarning">
            <summary>
            Adjust earning
            </summary>
        </member>
        <member name="F:j6.Core.PermissionCode.Exemption">
            <summary>
            have exemption.
            </summary>
        </member>
        <member name="T:j6.Core.IRandomRangeFlow">
            <summary>
            Random Range Flow
            </summary>
        </member>
        <member name="M:j6.Core.IRandomRangeFlow.Update(j6.Core.RandomRange)">
            <summary>
            Creates or updates a range with the given Code.
            </summary>
            <param name="randomRange"></param>
        </member>
        <member name="M:j6.Core.IRandomRangeFlow.DeleteAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes the specified ranges.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:j6.Core.IRandomRangeFlow.Get(System.String)">
            <summary>
            Returns a RandomRange component with configuration information for range if one exists, null otherwise.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRandomRangeFlow.Random(System.String)">
            <summary>
            Returns a random number that falls between the StartValue and EndValue of the RandomRange specified by the given code.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:j6.Core.IRealtimeActivityFlow">
            <summary>
             Interface for managing RealtimeActivity objects.
            </summary>
        </member>
        <member name="M:j6.Core.IRealtimeActivityFlow.RecordInstanceStart(j6.Core.RealtimeActivity,System.Workflow.Runtime.WorkflowInstance)">
            <summary>Record the running instance for the activity</summary>
            <param name="activity">RealtimeActivity object</param>
            <param name="instance">WorkflowInstance object</param>
        </member>
        <member name="M:j6.Core.IRealtimeActivityFlow.RecordInstanceEnd(j6.Core.RealtimeActivity,System.String,System.String,System.Exception)">
            <summary>Record the end of a running instance for the activity</summary>
            <param name="activity">RealtimeActivity object, if not provided, will be found by instance reference</param>
            <param name="instance">Workflow Instance Id</param>
            <param name="reason">Indication of End cause</param>
            <param name="exception">optional exception corresponding to end reason</param>
        </member>
        <member name="M:j6.Core.IRealtimeActivityFlow.RecordActivityStart(System.String)">
            <summary>Record the start of an instance execution</summary>
            <param name="instance">WorkflowInstance reference</param>
        </member>
        <member name="M:j6.Core.IRealtimeActivityFlow.RecordActivityEnd(System.String)">
            <summary>Record the end of an instance execution</summary>
            <param name="instance">WorkflowInstance reference</param>
        </member>
        <member name="M:j6.Core.IRealtimeActivityFlow.RecordError(System.String,System.String)">
            <summary>Record LastError text for the corresponding activity</summary>
            <param name="instance">WorkflowInstance reference</param>
            <param name="error">Error text</param>
        </member>
        <member name="M:j6.Core.IRealtimeActivityFlow.RecordErrorAndStop(System.String,System.String)">
            <summary>Record LastError text for the corresponding activity, as well as, setting the StopRequested</summary>
            <param name="instance">WorkflowInstance reference</param>
            <param name="error">Error text</param>
        </member>
        <member name="M:j6.Core.IRealtimeActivityFlow.GetByInstance(System.String)">
            <summary>Retrieve the activity corresponding to the instance
            </summary>
            <param name="instance">WorkflowInstance reference</param>
            <returns>RealtimeActivity object</returns>
        </member>
        <member name="T:j6.Core.IResourceFlow">
            <summary>
            Defines the interface for which string resources can be looked up.
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.Exists(j6.Core.ResourceQuery)">
            <summary>
            Is there content for the given query?
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetString(j6.Core.ResourceQuery)">
            <summary>
            Returns the resource as a string
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetString(j6.Core.ResourceQuery,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Get resource with substitution
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetString(System.String)">
            <summary>
            Splits the key into context.id.property, then uses the current thread resource set and culture where theme has not been specified
            </summary>
            <param name="resourceKey">context.id.property</param>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetByToken(System.String)">
            <summary>
            Retrieves the content for a specific resource, as already identified through a resource key.
            </summary> 
            <param name="code">The unique token of the actual resource value</param>
            <remarks>This method supports image content types being streamed from a URL request 
            without also exposing access through resource keys</remarks>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetStrings(j6.Core.ResourceQueries)">
            <summary>
            Get multiple resource strings
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.DoStringActions(j6.Core.ResourceActions)">
            <summary>
            Apply resource values to the provided action
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetContent(j6.Core.ResourceQuery)">
            <summary>
            Returns the resource as binary data.
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.SetString(j6.Core.ResourceQuery,System.String)">
            <summary>
            Sets the value associated with the given resource 
            query. Note that setting the value to null indicates
            the value should be deleted.
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.SetContent(j6.Core.ResourceQuery,System.String,System.Byte[])">
            <summary>
            Sets the value associated with the given resource 
            query. Note that setting the value to null indicates
            the value should be deleted.
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetContentType(System.String)">
            <summary>
            Get the ContentType code based on the media type; null indicates unsupported media
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.ImportResources(System.String)">
            <summary>
            Loads resources from the given data.
            </summary>
            <param name="xml">A string containing the resource set and header comments.</param>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetThreadResourceSet">
            <summary>
            Gets the resource set for the currently executing thread
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.SetThreadResourceSet(System.String)">
            <summary>
            Sets the resource set for the currently executing thread
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.ResetThreadResourceSet">
            <summary>
            Clears the resource set for the currently executing thread
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetParents(System.String)">
            <summary>
            Returns all the parent resource sets for the given set.
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.RenameContext(System.String,System.String)">
            <summary>
            Renames the oldContext to newContext
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.AddSubstitutions(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Interrogates object and adds each property as an available substitution
            </summary>
            <param name="substitutions">Dictionary to add property values to</param>
            <param name="prefix">Value to qualify properties</param>
            <param name="obj">Object whose properties will be added to dictionary</param>
        </member>
        <member name="M:j6.Core.IResourceFlow.LoadComponentWithResources(j6.Core.ComponentBase,System.Collections.Generic.List{System.Reflection.PropertyInfo})">
            <summary>
            Loads the resources with the given component
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.UpdateResourcesFromComponent(j6.Core.ComponentBase,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the resource values for the given component
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.UpdateResourcesFromComponents(System.Collections.Generic.IEnumerable{j6.Core.ComponentBase},System.Collections.Generic.Dictionary{j6.Core.ComponentBase,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Updates the resource values for the given components
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.GetProperties(System.String,System.String,System.String,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Returns all the properties for the context / id
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.Substitute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            $-substitutions, then $(aaa.aaa.aaa) from resource
            </summary>
        </member>
        <member name="M:j6.Core.IResourceFlow.Init">
            <summary>
            Initialize the resource flow. Internal use only.
            </summary>
        </member>
        <member name="P:j6.Core.IResourceFlow.DefaultResourceSet">
            <summary>
            Determines the default resource set for the system.
            </summary>
        </member>
        <member name="T:j6.Core.IRoleFlow">
            <summary>
            Used to work with flows
            </summary>
        </member>
        <member name="M:j6.Core.IRoleFlow.AddUserToRole(System.String,System.String)">
            <summary>
            Adds a single user to a single role.
            </summary>
            <param name="username"></param>
            <param name="roleName"></param>
        </member>
        <member name="M:j6.Core.IRoleFlow.AddUsersToRoles(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds all the given users to all the given roles
            </summary>
        </member>
        <member name="M:j6.Core.IRoleFlow.AddAccountClassesToRoles(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds all the given account classes to all the given roles
            </summary>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetAllNonWindows">
            <summary>
            Gets a list of all the roles in the system excluding 
            roles that are associated with Windows Authentication.
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetByUser(System.String)">
            <summary>
            Get all the roles that a specific user belongs to.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetByUserExcludeInherited(System.String)">
            <summary>
            Get all the roles that a specific user belongs to.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetByUserOnlyInherited(System.String)">
            <summary>
            Get all the roles that are inherited, and do not include any others.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetByPermission(System.String)">
            <summary>
            Get all roles attached to a specific permission
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetByAccountClass(System.String)">
            <summary>
            Get role for given account class
            </summary>
        </member>
        <member name="M:j6.Core.IRoleFlow.IsUserInRole(System.String,System.String)">
            <summary>
            Determine whether or not a specific user belongs to a specific role.
            </summary>
        </member>
        <member name="M:j6.Core.IRoleFlow.RemoveUserFromRole(System.String,System.String)">
            <summary>
            Remove a user from a roles
            </summary>
        </member>
        <member name="M:j6.Core.IRoleFlow.RemoveUsersFromRoles(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove thes user from all the given roles
            </summary>
        </member>
        <member name="M:j6.Core.IRoleFlow.RemoveUserFromAllRoles(System.String)">
            <summary>
            Remove a user from all roles
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:j6.Core.IRoleFlow.RemoveAccountClassFromAllRoles(System.String)">
            <summary>
            Remove an account class from all roles
            </summary>
            <param name="AccountClassCode"></param>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetUsersInRole(System.String)">
            <summary>
            Return all users who belong to a specific role.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetUsersInRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return all users who belong to a list of roles.
            </summary>
            <param name="roleNames"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetUsersInAdminRoles">
            <summary>
            Return all users who belong to a list of administrative roles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IRoleFlow.GetCountOfUsersInRole(System.String)">
            <summary>
            Returns the number of users in the given role
            </summary>
        </member>
        <member name="T:j6.Core.ISequenceNumberFlow">
            <summary>
            Provides access to named sequence numbers.
            </summary>
        </member>
        <member name="M:j6.Core.ISequenceNumberFlow.Create(j6.Core.CreateSequence)">
            <summary>
            Creates a new sequence
            </summary>
        </member>
        <member name="M:j6.Core.ISequenceNumberFlow.Reset(System.String)">
            <summary>
            Resets the value of the counter to its initial state.
            </summary>
            <param name="code">external identifier</param>
        </member>
        <member name="M:j6.Core.ISequenceNumberFlow.DeleteAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes the specified counter.
            </summary>
            <param name="codes">external identifiers</param>
        </member>
        <member name="M:j6.Core.ISequenceNumberFlow.Exists(System.String)">
            <summary>
            Determine if a sequence exists for the specified identifier.
            </summary>
            <param name="code">external identifier</param>
        </member>
        <member name="M:j6.Core.ISequenceNumberFlow.NextValue(System.String)">
            <summary>
            Saves the current value, increments the counter by one, then returns the saved current value. 
            This is the method that clients should call when they are requesting a new unique number.
            </summary>
            <param name="code">external identifier</param>
            <returns>new counter value</returns>
        </member>
        <member name="M:j6.Core.ISequenceNumberFlow.NextValueRange(System.String,System.Int32)">
            <summary>
            Saves the current value, increments the counter by the specified amount, then returns the saved current value through current value + count. 
            This is the method that clients should call when they are requesting a range of new unique numbers.
            </summary>
            <param name="code">external identifier</param>
            <param name="count">number of identifiers being requested</param>
            <returns>new counter value</returns>
        </member>
        <member name="M:j6.Core.ISequenceNumberFlow.Get(System.String)">
            <summary>
            Returns a read-only component with configuration information for the sequence number if one exists, null otherwise.
            </summary>
            <param name="code">external identifier</param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.ISequenceNumberFlow.VerifySequences">
            <summary>
            Ensures that AllowSkip sequences have SQL Sequence objects to go with them, and records with
            AllowSkip = false do not have SQL Sequence objects.
            </summary>
        </member>
        <member name="T:j6.Core.IsoCountry">
            <summary>
            Represents an Iso standard country.
            </summary>
        </member>
        <member name="M:j6.Core.IsoCountry.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.IsoCountry.Clone">
            <see cref="M:j6.Core.CodeComponent.Clone"/>
        </member>
        <member name="P:j6.Core.IsoCountry.ExtendedCode">
            <summary>
            The 3-letter ISO code
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.Name">
            <summary>
            The official name of the country.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.AlternateCode">
            <summary>
            A code that is used to interface with systems that do not use
            the ISO standard to represent countries.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.RequiresLine1">
            <summary>
            Flags if this country requires postal address Line 1 for their addresses.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.RequiresCity">
            <summary>
            Flags if this country requires cities for their addresses.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.RequiresProvince">
            <summary>
            Flags if this country requires a state/province/region/territory/prefecture
            field in their postal addresses.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.RequiresPostalCode">
            <summary>
            Flags if this country requires postal codes for their postal addresses.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.DisplayPostalCode">
            <summary>
            Flags if this country should display postal codes in their addresses.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.DisplayProvince">
            <summary>
            Flags if this country should display provinces in their addresses.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.ProvinceLabelResource">
            <summary>
            Resource key (dot notation style) for what this country calls their 
            states/provinces/regions/territories/prefectures
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.ProvinceRegEx">
            <summary>
            Regular Expression string to be used to validate the State/Province.
            </summary>
        </member>
        <member name="P:j6.Core.IsoCountry.Identifier">
            <summary>
            Returns the 2-letter code.
            </summary>
        </member>
        <member name="T:j6.Core.IStateProvinceFlow">
            <summary>
            Interface for managing StateProvimnce objects.
            </summary>
        </member>
        <member name="M:j6.Core.IStateProvinceFlow.GetByCountry(System.String)">
            <summary>
            Returns all states/province items that have the corresponding country
            </summary>
        </member>
        <member name="T:j6.Core.ISuffixFlow">
            <summary>
            Interface for managing Currency objects.
            </summary>
        </member>
        <member name="T:j6.Core.ITagFlow">
            <summary>
            Interface for TagFlow.
            </summary>
        </member>
        <member name="M:j6.Core.ITagFlow.GetTagsForEntity(j6.Core.IEntity)">
            <summary>
            Returns all the tags associated with a particular entity
            </summary>
        </member>
        <member name="M:j6.Core.ITagFlow.GetEntitiesForTag(System.String)">
            <summary>
            Returns all the entities tagged with the given tag.
            </summary>
        </member>
        <member name="M:j6.Core.ITagFlow.AddTag(j6.Core.IEntity,System.String)">
            <summary>
            Adds a tag to the entity
            </summary>
        </member>
        <member name="M:j6.Core.ITagFlow.RemoveTag(j6.Core.IEntity,System.String)">
            <summary>
            Removes a tag from the entity
            </summary>
        </member>
        <member name="M:j6.Core.ITagFlow.RemoveAllTags(j6.Core.IEntity)">
            <summary>
            Removes all tags from the entity.
            </summary>
        </member>
        <member name="M:j6.Core.ITagFlow.HasTag(j6.Core.IEntity,System.String)">
            <summary>
            Returns true if the entity has the given tag,
            false otherwise.
            </summary>
        </member>
        <member name="T:j6.Core.ITaxIdFlow">
            <summary>
            ITaxIdFlow
            </summary>
        </member>
        <member name="M:j6.Core.ITaxIdFlow.GetByCountry(System.String)">
            <summary>
            Get tax id format validation regular expression and valid example.
            </summary>
        </member>
        <member name="T:j6.Core.ITemplateCategoryFlow">
            <summary>
            Template Category processing service.
            </summary>
        </member>
        <member name="M:j6.Core.ITemplateCategoryFlow.IsTemplateCategoryOptOut(System.String)">
            <summary>
            GetTemplateCategory
            </summary>
        </member>
        <member name="T:j6.Core.ITemplateFlow">
            <summary>
            Template processing service.
            </summary>
        </member>
        <member name="M:j6.Core.ITemplateFlow.GetByTag(System.String)">
            <summary>
            Retrieves all templates with the given tag.
            </summary>
        </member>
        <member name="M:j6.Core.ITemplateFlow.GetAllTemplateDetail">
            <summary>
            Retrieves all templates
            </summary>
        </member>
        <member name="M:j6.Core.ITemplateFlow.GetAllWithSelectOption">
            <summary>
            Get all with a select option which has code null
            </summary>
        </member>
        <member name="M:j6.Core.ITemplateFlow.GetDetailByTemplateCategory(System.String,System.Boolean)">
            <summary>
            Retrieves all templates that reference the template category
            </summary>
            <param name="category"></param>
            <param name="publishedOnly"></param>
            <returns></returns>
        </member>
        <member name="T:j6.Core.IThemeFlow">
            <summary>
            Defines the interface for looking up web themes.
            </summary>
        </member>
        <member name="M:j6.Core.IThemeFlow.GetThemesByApplication(System.String)">
            <summary>
            Returns all themes for application
            </summary>
        </member>
        <member name="M:j6.Core.IThemeFlow.GetThemesEnabledByApplication(System.String)">
            <summary>
            Returns available themes for application
            </summary>
        </member>
        <member name="T:j6.Core.ITimeFlow">
            <summary>
            Methods for dealing with time
            </summary>
        </member>
        <member name="M:j6.Core.ITimeFlow.GetSystemTime">
            <summary>
             Returns the current system time.
            </summary>
        </member>
        <member name="T:j6.Core.ITransactionScope">
            <summary>
            Generic transaction interface a la TransactionScope
            </summary>
        </member>
        <member name="T:j6.Core.IGenericTransactionScope">
            <summary>
            Generic Transaction Scope
            </summary>
        </member>
        <member name="M:j6.Core.IGenericTransactionScope.Complete">
            <summary>
            Called when all operations have completed. When Dispose is called,
            the transaction will be committed if the Complete() method has been
            called, otherwise it will be rolled back.
            </summary>
        </member>
        <member name="E:j6.Core.ITransactionScope.TransactionCompleting">
            <summary>
             Event to delay functions until transaction scope is completing
            </summary>
        </member>
        <member name="E:j6.Core.ITransactionScope.OuterTransactionCompleting">
            <summary>
             Event to delay functions until outer most transaction scope is completing
            </summary>
        </member>
        <member name="T:j6.Core.IIndependentTransactionScope">
            <summary>
            Generic transaction interface a la TransactionScope
            </summary>
        </member>
        <member name="T:j6.Core.INullTransactionScope">
            <summary>
            Generic transaction interface a la TransactionScope
            </summary>
        </member>
        <member name="T:j6.Core.ISuppressTransactionScope">
            <summary>
            Generic transaction interface a la TransactionScope
            </summary>
        </member>
        <member name="T:j6.Core.ITransactionScopeFactory">
            <summary>
            Provides a way to get access to a new ITransactionScope.
            </summary>
        </member>
        <member name="T:j6.Core.INullTransactionScopeFactory">
            <summary>
            Provides a way to get access to a new INullTransactionScope.
            </summary>
        </member>
        <member name="T:j6.Core.IIndependentTransactionScopeFactory">
            <summary>
            Provides a way to get access to a new ITransactionScope.
            </summary>
        </member>
        <member name="T:j6.Core.ITranslationFlow">
            <summary>
            Helper functions for translation
            </summary>
        </member>
        <member name="M:j6.Core.ITranslationFlow.Translate(System.String,System.Object[])">
            <summary>
            Takes a resource key in the format context.name.property, and optionally
            some substitution values, and returns the translation for that key, with
            string substitution as provided by String.Format. If the substitution fails
            for any reason, the return value will be the result of IResourceFlow.GetString(key).
            </summary>
        </member>
        <member name="M:j6.Core.ITranslationFlow.GetTranslatedResource(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Takes a resource key in the format context.name.property, a culture defining the culture for
            which the resource to be retrieved, and a Dictionaly of replacement parameters. Substitutes 
            all parameters defined in replacements dictionary using Algorithm.SubstitureParameters 
            </summary>
            <param name="key">Resource Key</param>
            <param name="culture">Culture</param>
            <param name="replacements">Substitution parameters</param>
            <returns></returns>
        </member>
        <member name="T:j6.Core.ITriggerEventCategoryFlow">
            <summary>
            ITriggerEventCategoryFlow
            </summary>
        </member>
        <member name="T:j6.Core.ITriggerEventFlow">
            <summary>
            ITriggerEventFlow
            </summary>
        </member>
        <member name="T:j6.Core.ITriggerEventHandler">
            <summary>
            Handles trigger events that are fired in the system.
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventHandler.HandleEvent(System.Object,j6.Core.TriggerEvent)">
            <summary>
            Respond to the event in some way
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventFlow.IsActive(System.String)">
            <summary>
            Return true if trigger event type is actve.
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventFlow.CreateTriggerEvent(System.String,System.Object)">
            <summary>
            Create trigger event
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventFlow.GetEvents(System.Int32)">
            <summary>
            Gets queue events, but leave them in the queue.
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventFlow.ReadEvent">
            <summary>
            Gets queue events, and removes them from queue.
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventFlow.WriteResponse(j6.Core.TriggerEventStatus)">
            <summary>
            Write response event
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:j6.Core.ITriggerEventFlow.ProcessEvents(System.Int32)">
            <summary>
            Does the work of converting from trigger event to message and call IMessageFlow.
            </summary>
        </member>
        <member name="T:j6.Core.ITriggerEventProcessor">
            <summary>
            Responds to trigger events
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventProcessor.ProcessTriggerEvent(j6.Core.TriggerEvent)">
            <summary>
            Responds to trigger events
            </summary>
        </member>
        <member name="T:j6.Core.ITriggerEventTypeFlow">
            <summary>
            ITriggerEventTypeFlow
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventTypeFlow.GetByCategory(System.String)">
            <summary>
            Gets trigger enent type by category.
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventTypeFlow.GetTriggerEventHandler(System.String)">
            <summary>
            GetTriggerEventHandle
            </summary>
        </member>
        <member name="M:j6.Core.ITriggerEventTypeFlow.IsActive(System.String)">
            <see cref="M:j6.Core.ITriggerEventFlow.IsActive(System.String)"/>
        </member>
        <member name="T:j6.Core.LoginResult">
            <summary>
            Defines the given results of attemping to login.
            </summary>
        </member>
        <member name="F:j6.Core.LoginResult.OK">
            <summary>
            Login is ok.
            </summary>
        </member>
        <member name="F:j6.Core.LoginResult.BAD_USER">
            <summary>
            Bad user name.
            </summary>
        </member>
        <member name="F:j6.Core.LoginResult.BAD_PASSWORD">
            <summary>
            Bad password.
            </summary>
        </member>
        <member name="F:j6.Core.LoginResult.INACTIVE">
            <summary>
            Account is inactive.
            </summary>
        </member>
        <member name="F:j6.Core.LoginResult.NO_ACCOUNT">
            <summary>
            No account attached for this user.
            </summary>
        </member>
        <member name="F:j6.Core.LoginResult.NO_MATCHING_ACCOUNT">
            <summary>
            No account found for this user.
            </summary>
        </member>
        <member name="T:j6.Core.IUserFlow">
            <summary>
            Defines portal user-centric logic.
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.ValidateLogin(System.String,System.String)">
            <summary>
            Checks the given username/password for validity.
            </summary>
            <param name="username">The username of the person logging in.</param>
            <param name="password">A user's clear text password.</param>
            <returns><see cref="T:j6.Core.LoginResult"/></returns>
        </member>
        <member name="M:j6.Core.IUserFlow.GetByAccount(System.String)">
            <summary>
            Returns all the users associated with a particular account.
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.GetByAccounts(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns all the users associated with a particular set of accounts.
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.GetDetailByAccount(System.String)">
            <summary>
            Returns all the users associated with a particular account.
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.GetAllDetailWithOutAccount">
            <summary>
            Returns all the users not associated to an account.
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.ResetPassword(System.String)">
            <summary>
            Generates a new password and updates the Password field to the new password, and MustChangePassword to true
            </summary>
            <param name="userCode"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IUserFlow.GeneratePassword">
            <summary>
            Generates a Password and honors the MinRequiredPasswordLength and GeneratedPasswordLength app settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IUserFlow.ResetUserInSlot">
            <summary>
            Resets the user component currently stored in the associated thread slot.
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.ValidateUserName(System.String)">
            <summary>
            Validates a username, throws CodeNotUniqueException if username exists, and throws CodeFormatException
            if user code is does not pass regex strength validation
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.ValidateUserNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates usernames, throws CodeNotUniqueAggregateException if username exists, and throws CodeFormatAggregateException
            if user code is does not pass regex strength validation
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.ValidatePasswordGenerations(System.String,System.String)">
            <summary>
            Validates that a password is not the same as a previous one
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.ClearFailedPasswordAttemptLog(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears the FailedPasswordAttemptLog of records for the specified user.
            </summary>
            <param name="userCodes"></param>
        </member>
        <member name="M:j6.Core.IUserFlow.UpdateUserName(System.String,System.String)">
            <summary>
            Validates the username and updates the User and Enrollment to reflect the new user name
            </summary>
        </member>
        <member name="M:j6.Core.IUserFlow.LogInvalidPasswordAttempt(System.String)">
            <summary>
            Adds an entry (who/when) into the log for failed passwords
            </summary>
            <param name="userCode"></param>
        </member>
        <member name="M:j6.Core.IUserFlow.ValidatePasswordAttemptLimit(System.String)">
            <summary>
            Determines whether or not the user has reached the limit of invalid password attempts.
            Will update the user record if it has been detected they are in violation
            </summary>
            <param name="userCode"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.IUserFlow.AsCurrentUser``1(System.Func{``0})">
            <summary>
            Returns a function that will do the work of the given function
            as the current user, regardless of who the current user is
            when the function is called.
            </summary>
        </member>
        <member name="P:j6.Core.IUserFlow.PasswordRegex">
            <summary>
            Regular Expression Pattern used to validate passwords.
            </summary>
        </member>
        <member name="P:j6.Core.IUserFlow.UserNameRegex">
            <summary>
            Regular Expression Pattern user to validate user names.
            </summary>
        </member>
        <member name="P:j6.Core.IUserFlow.Current">
            <summary>
            The current user for the thread
            </summary>
        </member>
        <member name="T:j6.Core.IValidation">
            <summary>
            Contains validation methods.
            </summary>
        </member>
        <member name="M:j6.Core.IValidation.IsNotNull(System.Object,System.String)">
            <summary>
            Throws an exception if the object is null.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="objectName">The name of the object.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:j6.Core.IValidation.SuchObject``1(``0,System.String)">
            <summary>
            Throws an exception if the object is null.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="objectCode">The code which identifies the object.</param>
            <returns>Returns the object passed in.</returns>
            <exception cref="T:j6.Core.NoSuchObjectException"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgNotNull(System.Object,System.String)">
            <summary>
            Throws an exception if the argument is null.
            </summary>
            <param name="argumentToValidate">The argument to validate.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:j6.Core.IValidation.Validate(System.Object)">
            <summary>
            Checks for values in all properties with [Required].
            Throws an exception if a required property does not have a value.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgHasValue``1(``0,System.String)">
            <summary>
            Throws an exception if the argument is null or does not have a value.
            </summary>
            <param name="argumentToValidate">The argument to validate.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:j6.Core.EmptyStringException"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgValid(System.Object,System.String)">
            <summary>
            Checks that the argument is not null and that it is valid according to IValidation.Validate().
            Throws an exception if a condition is not met.
            </summary>
            <param name="argumentToValidate">The argument to validate.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:j6.Core.EmptyStringException"/>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"/>
        </member>
        <member name="M:j6.Core.IValidation.IsTrue(System.Boolean,System.String)">
            <summary>
            Throws an exception if the condition is not true.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The message to display if the condition is not true.</param>
            <exception cref="T:j6.Core.JenkonException"/>
        </member>
        <member name="M:j6.Core.IValidation.HasValue(System.String,System.String)">
            <summary>
            Throws an exception if the string is null or does not have a value.
            </summary>
            <param name="stringToValidate">The string to validate.</param>
            <param name="stringName">The name of the string.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:j6.Core.EmptyStringException"/>
        </member>
        <member name="M:j6.Core.IValidation.NotImplemented">
            <summary>
            Throws a NotImplementedException.
            </summary>
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgConstraint(System.Boolean,System.String)">
            <summary>
            Throws an exception if the argument is not true.
            </summary>
            <param name="argumentToValidate">The argument to validate.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="M:j6.Core.IValidation.ArgumentException``1(System.String)"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgNonZero(System.Int32,System.String)">
            <summary>
            Throws an exception if the argument is zero.
            </summary>
            <param name="argumentToValidate">The argument to validate.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="M:j6.Core.IValidation.ArgumentException``1(System.String)"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgPositive(System.Int32,System.String)">
            <summary>
            Throws an exception if the argument is less than one.
            </summary>
            <param name="argumentToValidate">The argument to validate.</param>
            <param name="argumentName">The name of the argument.</param>
            <returns>Returns the argument passed in.</returns>
            <exception cref="M:j6.Core.IValidation.ArgumentException``1(System.String)"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgNotNegative(System.Int32,System.String)">
            <summary>
            Throws an exception if the argument is less than zero.
            </summary>
            <param name="argumentToValidate">The argument to validate.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="M:j6.Core.IValidation.ArgumentException``1(System.String)"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgumentException``1(System.String)">
            <summary>
            Throws an ArgumentException.
            This is useful because it can be used as an expression as opposed to the throw statement, which cannot.
            </summary>
            <param name="message">The message to display if the condition is not true.</param>
            <exception cref="M:j6.Core.IValidation.ArgumentException``1(System.String)"/>
        </member>
        <member name="M:j6.Core.IValidation.ArgIsValidHtmlId(System.String,System.String)">
            <summary>
            Throws an exception if the argument is not a valid HTML element ID
            </summary>
            <param name="stringToValidate">The string to validate.</param>
            <param name="stringName">The name of the string.</param>
            <exception cref="M:j6.Core.IValidation.ArgumentException``1(System.String)"/>
        </member>
        <member name="M:j6.Core.IValidation.CheckValid(System.Object)">
            <summary>
            Validates the object, and throws a ValidationException if there are any validation failures
            </summary>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="P:j6.Core.IValidation.LogFlag">
            <summary>
            Indicates whether or not logging should be done.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type[])">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseTypes">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:j6.Core.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:j6.Core.Message.To">
            <summary>
            To list.
            </summary>
        </member>
        <member name="P:j6.Core.Message.Cc">
            <summary>
            Cc list.
            </summary>
        </member>
        <member name="P:j6.Core.Message.Bcc">
            <summary>
            Bcc list.
            </summary>
        </member>
        <member name="P:j6.Core.Message.MessageType">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="P:j6.Core.Message.From">
            <summary>
            Message from.
            </summary>
        </member>
        <member name="P:j6.Core.Message.Subject">
            <summary>
            Subject, key to template
            </summary>
        </member>
        <member name="P:j6.Core.Message.Body">
            <summary>
            Body, key to template.
            </summary>
        </member>
        <member name="P:j6.Core.Message.AccountCode">
            <summary>
            Account code.
            </summary>
        </member>
        <member name="P:j6.Core.Message.Recipients">
            <summary>
            
            </summary>
        </member>
        <member name="T:j6.Core.MessageType">
            <summary>
            MessageType component
            </summary>
        </member>
        <member name="T:j6.Core.Money">
            <summary>
            Encapsulates a currency and an amount.
            </summary>
        </member>
        <member name="M:j6.Core.Money.#ctor">
            <summary>
            Default constructor... only use for deserialization
            </summary>
        </member>
        <member name="M:j6.Core.Money.#ctor(System.String,System.Decimal,System.String)">
            <summary>
            Value constructor.
            </summary>
            <param name="amount">Amount</param>
            <param name="currency">Currency</param>
            <param name="currencyFormat">The string format for the "ToString" method, using amount as the {0} parameter and currency as the {1} parameter (Default: null to use the default currency format)</param>
        </member>
        <member name="M:j6.Core.Money.#ctor(System.Decimal,System.String,System.String)">
            <summary>
            Value constructor.
            </summary>
            <param name="amount">Amount</param>
            <param name="currency">Currency</param>
            <param name="currencyFormat">The string format for the "ToString" method, using amount as the {0} parameter and currency as the {1} parameter (Default: null to use the default currency format)</param>
        </member>
        <member name="M:j6.Core.Money.#ctor(System.Decimal,System.String)">
            <summary>
            Value constructor.
            </summary>
            <param name="amount">Amount</param>
            <param name="currency">Currency</param>
        </member>
        <member name="M:j6.Core.Money.#ctor(j6.Core.Currency,System.Decimal)">
            <summary>
            Value constructor.
            </summary>
            <param name="amount">Amount</param>
            <param name="currency">Currency</param>
        </member>
        <member name="M:j6.Core.Money.#ctor(System.Decimal,j6.Core.Currency)">
            <summary>
            Value constructor.
            </summary>
            <param name="amount">Amount</param>
            <param name="currency">Currency</param>
        </member>
        <member name="M:j6.Core.Money.Round(j6.Core.Money,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the money value to the specified number of decimal places
            </summary>
        </member>
        <member name="M:j6.Core.Money.Abs(j6.Core.Money)">
            <summary>
            Returns the absolute value of the money specified
            </summary>
        </member>
        <member name="M:j6.Core.Money.op_Equality(j6.Core.Money,j6.Core.Money)">
            <summary>
            Compares two Money values and returns true if equal
            </summary>
        </member>
        <member name="M:j6.Core.Money.op_Inequality(j6.Core.Money,j6.Core.Money)">
            <summary>
            Compares two Money values and returns true if not equal
            </summary>
        </member>
        <member name="M:j6.Core.Money.op_Addition(j6.Core.Money,j6.Core.Money)">
            <summary>
            Adds two Money values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Subtraction(j6.Core.Money,j6.Core.Money)">
            <summary>
            Subtracts two Money values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Multiply(j6.Core.Money,System.Decimal)">
            <summary>
            Multiplies Money value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Multiply(j6.Core.Money,System.Int32)">
            <summary>
            Multiplies Money value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Multiply(System.Decimal,j6.Core.Money)">
            <summary>
            Multiplies Money value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Multiply(System.Nullable{System.Int32},j6.Core.Money)">
            <summary>
            Multiplies Money value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Multiply(System.Int32,j6.Core.Money)">
            <summary>
            Multiplies Money Value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.Money.op_Multiply(j6.Core.Money,System.Nullable{System.Int32})">
            <summary>
            Multiplies Money Value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:j6.Core.Money.op_Multiply(j6.Core.Money,j6.Core.Money)">
            <summary>
            Divides Money value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Division(j6.Core.Money,System.Decimal)">
            <summary>
            Divides Money value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Division(j6.Core.Money,j6.Core.Money)">
            <summary>
            Divides Money value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_Modulus(j6.Core.Money,System.Decimal)">
            <summary>
            Gets mod of Money value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:j6.Core.Money.op_GreaterThan(j6.Core.Money,j6.Core.Money)">
            <summary>
            Greater than comparison operator
            </summary>
        </member>
        <member name="M:j6.Core.Money.op_LessThan(j6.Core.Money,j6.Core.Money)">
            <summary>
            Less than comparison operator
            </summary>
        </member>
        <member name="M:j6.Core.Money.op_GreaterThanOrEqual(j6.Core.Money,j6.Core.Money)">
            <summary>
            Greater than or equal to operator
            </summary>
        </member>
        <member name="M:j6.Core.Money.op_LessThanOrEqual(j6.Core.Money,j6.Core.Money)">
            <summary>
            Less than or equal to operator
            </summary>
        </member>
        <member name="M:j6.Core.Money.Min(j6.Core.Money[])">
            <summary>
            Returns the least of the given Money values (null = 0)
            </summary>
        </member>
        <member name="M:j6.Core.Money.Max(j6.Core.Money[])">
            <summary>
            Returns the greatest of the given Money values (null = 0)
            </summary>
        </member>
        <member name="P:j6.Core.Money.Amount">
            <summary>
            The amount.
            </summary>
        </member>
        <member name="P:j6.Core.Money.DisplayValue">
            <summary>
            The amount as it should be displayed to the user
            </summary>
        </member>
        <member name="P:j6.Core.Money.NegativeDisplayValue">
            <summary>
            The amount as it should be displayed to the user if the amount is negated (as in balance sign-reversal)
            </summary>
        </member>
        <member name="P:j6.Core.Money.Currency">
            <summary>
            The currency code.
            </summary>
        </member>
        <member name="P:j6.Core.Money.Format">
            <summary>
            The string format for the "ToString" method, using amount as the {0} parameter and currency as the {1} parameter (Default: null to use the default currency format)
            </summary>
        </member>
        <member name="P:j6.Core.Money.Identifier">
            <summary>
            The identifier of this Money...
            </summary>
        </member>
        <member name="T:j6.Core.MoneyExtensions">
            <summary>
            Aggregate methods and condition tests for code simplicity
            </summary>
        </member>
        <member name="M:j6.Core.MoneyExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,j6.Core.Money})">
            <summary>
            Sums the monetary values
            </summary>
        </member>
        <member name="M:j6.Core.MoneyExtensions.Sum(System.Collections.Generic.IEnumerable{j6.Core.Money})">
            <summary>
            Sums the monetary values
            </summary>
        </member>
        <member name="M:j6.Core.MoneyExtensions.IsNegative(j6.Core.Money)">
            <summary>
            Returns true if the monetary amount is negative
            </summary>
        </member>
        <member name="M:j6.Core.MoneyExtensions.IsPositive(j6.Core.Money)">
            <summary>
            Returns true if the monetary amount is positive
            </summary>
        </member>
        <member name="M:j6.Core.MoneyExtensions.IsZero(j6.Core.Money,System.Boolean)">
            <summary>
            Returns true if the monetary amount is zero
            </summary>
        </member>
        <member name="M:j6.Core.MoneyExtensions.IsZeroOrNegative(j6.Core.Money,System.Boolean)">
            <summary>
            Returns true if the monetary amount is zero or negative
            </summary>
        </member>
        <member name="M:j6.Core.MoneyExtensions.IsZeroOrPositive(j6.Core.Money,System.Boolean)">
            <summary>
            Returns true if the monetary amount is zero or positive
            </summary>
        </member>
        <member name="T:j6.Core.Pair`2">
            <summary>
            Holds a pair of items.
            </summary>
        </member>
        <member name="M:j6.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Pair`2.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:j6.Core.Pair`2.First">
            <summary>
            The first item of the pair.
            </summary>
        </member>
        <member name="P:j6.Core.Pair`2.Second">
            <summary>
            The second item of the pair.
            </summary>
        </member>
        <member name="T:j6.Core.Grant">
            <summary>
            Grant or deny
            </summary>
        </member>
        <member name="F:j6.Core.Grant.GRANT">
            <summary>
            Grant the permission
            </summary>
        </member>
        <member name="F:j6.Core.Grant.DENY">
            <summary>
            Deny the permission
            </summary>
        </member>
        <member name="T:j6.Core.RoleAssignment">
            <summary>
            Assignment to a role of either a Grant or Deny.
            </summary>
        </member>
        <member name="M:j6.Core.RoleAssignment.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.RoleAssignment.Role">
            <summary>
            Role code
            </summary>
        </member>
        <member name="P:j6.Core.RoleAssignment.Grant">
            <summary>
            Grant, or deny?
            </summary>
        </member>
        <member name="T:j6.Core.Permission">
            <summary>
            Encapsulates a Permission
            </summary>
        </member>
        <member name="M:j6.Core.Permission.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.Permission.Clone">
            <see cref="M:j6.Core.CodeComponent.Clone"/>
        </member>
        <member name="P:j6.Core.Permission.RoleAssignments">
            <summary>
            Roles
            </summary>
        </member>
        <member name="T:j6.Core.PermissionQueryResult">
            <summary>
            PermissionQueryResult
            </summary>
        </member>
        <member name="P:j6.Core.PermissionQueryResult.Permission">
            <summary>
            The requested permission
            </summary>
        </member>
        <member name="P:j6.Core.PermissionQueryResult.Message">
            <summary>
            The error message if any
            </summary>
        </member>
        <member name="P:j6.Core.PermissionQueryResult.Role">
            <summary>
            The role from which the permission was obtained
            </summary>
        </member>
        <member name="P:j6.Core.PermissionQueryResult.Granted">
            <summary>
            Does the principal have the requested permission?
            </summary>
        </member>
        <member name="P:j6.Core.PermissionQueryResult.Principal">
            <summary>
            Identifier for the principal, such as Account:1000 or User:joe
            </summary>
        </member>
        <member name="T:j6.Core.PostalCode">
            <summary>
            Postal code component
            </summary>
        </member>
        <member name="P:j6.Core.PostalCode.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="P:j6.Core.PostalCode.StateProvince">
            <summary>
            StateProvince
            </summary>
        </member>
        <member name="T:j6.Core.PostalCodeDetail">
            <summary>
            Represents a postal code and all of it's contained Geo Codes.
            </summary>
        </member>
        <member name="P:j6.Core.PostalCodeDetail.GeoCodes">
            <summary>
            The list of GeoCodes contained within the PostalCode
            </summary>
        </member>
        <member name="T:j6.Core.RandomRange">
            <summary>
            Contains the rules/details of a RandomRange
            </summary>
        </member>
        <member name="M:j6.Core.RandomRange.#ctor">
            <summary>
            Public default constructor. No actions taken.
            </summary>
        </member>
        <member name="M:j6.Core.RandomRange.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Public constructor. Accepts primative types to intialize itself.
            </summary>
            <param name="code">External Identifier</param>
            <param name="startValue">Minimum allowable number</param>
            <param name="endValue">Maximum allowable number</param>
        </member>
        <member name="P:j6.Core.RandomRange.StartValue">
            <summary>
            Minimum allowable number.
            </summary>
        </member>
        <member name="P:j6.Core.RandomRange.EndValue">
            <summary>
            Maximum allowable number
            </summary>
        </member>
        <member name="T:j6.Core.ActivityKey">
            <summary>
            Key for a RealtimeActivity
            </summary>
        </member>
        <member name="M:j6.Core.ActivityKey.Equals(j6.Core.ActivityKey)">
            <summary>
            Compare by name and signature
            </summary>
        </member>
        <member name="M:j6.Core.ActivityKey.Equals(System.Object)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:j6.Core.ActivityKey.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:j6.Core.ActivityKey.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:j6.Core.ActivityKey.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="P:j6.Core.ActivityKey.Name">
            <summary>
            The name of the activity
            </summary>
        </member>
        <member name="P:j6.Core.ActivityKey.Signature">
            <summary>
            The signature (may be null)
            </summary>
        </member>
        <member name="T:j6.Core.RealtimeActivity">
            <summary>
            RealtimeActivity component.
            </summary>
        </member>
        <member name="M:j6.Core.RealtimeActivity.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:j6.Core.RealtimeActivity.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Key">
            <see cref="P:j6.Core.IKey`1.Key"/>
        </member>
        <member name="P:j6.Core.RealtimeActivity.System">
            <summary>
            System
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Instance">
            <summary>GUID representing running WorkflowInstance</summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.LastActivityStart">
            <summary>
            LastActivityStart
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.LastActivityEnd">
            <summary>
            LastActivityEnd
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.LastInstanceStart">
            <summary>
            LastInstanceStart
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.LastInstanceEnd">
            <summary>
            LastInstanceEnd
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.StopRequested">
            <summary>
            StopRequested
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.StartRequested">
            <summary>
            StartRequested
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.LastError">
            <summary>
            LastError
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.TotalCount">
            <summary>
            TotalCount
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.AveragePauseTime">
            <summary>
            AveragePauseTime
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.AverageRunTime">
            <summary>
            AverageRunTime
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivity.Process">
            <summary>
            Process
            </summary>
        </member>
        <member name="T:j6.Core.RealtimeActivityPayload">
            <summary>
            Payload wrapper for RealtimeActivity triggers.
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivityPayload.RealtimeActivity">
            <summary>
            RealtimeActivity
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivityPayload.WorkflowInstanceId">
            <summary>
            WorkflowInstanceId
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivityPayload.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivityPayload.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivityPayload.CurrentDirectory">
            <summary>
            CurrentDirectory
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivityPayload.ExceptionMessage">
            <summary>
            ExceptionMessage
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivityPayload.ExceptionStackTrace">
            <summary>
            ExceptionStackTrace
            </summary>
        </member>
        <member name="P:j6.Core.RealtimeActivityPayload.User">
            <summary>
            User
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.SensitiveAttribute">
            <summary>
            Indicate the workflow.method that flat a collection to a field
            </summary>
        </member>
        <member name="T:j6.Core.Attribute.RequiresExplicitOverrideAttribute">
            <summary>
            Requires explicit override
            </summary>
        </member>
        <member name="T:j6.Core.Resource">
            <summary>
            Resource with raw binary form and content properties
            </summary>
        </member>
        <member name="M:j6.Core.Resource.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:j6.Core.Resource.#ctor(System.String,System.Byte[],System.String)">
            <summary>Construct with values</summary>
        </member>
        <member name="M:j6.Core.Resource.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.Resource.Code">
            <summary>
             Unique identifier
            </summary>
        </member>
        <member name="P:j6.Core.Resource.Value">
            <summary>
             Binary value
            </summary>
        </member>
        <member name="P:j6.Core.Resource.ContentType">
            <summary>
             Key to HTTP Content-Type infromation
            </summary>
        </member>
        <member name="T:j6.Core.ResourceContent">
            <summary>
            Wrapper for image content and type information
            </summary>
        </member>
        <member name="P:j6.Core.ResourceContent.Resource">
            <summary><see cref="P:j6.Core.ResourceContent.Resource"></see></summary>
        </member>
        <member name="P:j6.Core.ResourceContent.ContentType">
            <summary><see cref="P:j6.Core.ResourceContent.ContentType"></see></summary>
        </member>
        <member name="T:j6.Core.ResourceQueryParameters">
            <summary>
             Encapsulates the core parameters that can be used for
             resource lookups.
            </summary>
        </member>
        <member name="P:j6.Core.ResourceQueryParameters.Culture">
            <summary>
            The desired culture. If null, the default culture is implied.
            </summary>
        </member>
        <member name="P:j6.Core.ResourceQueryParameters.ResourceSet">
            <summary>
            The desired resource set. If null, the "corporate"
            resource set is implied
            </summary>
        </member>
        <member name="P:j6.Core.ResourceQueryParameters.Theme">
            <summary>
            Always returns null;
            </summary>
        </member>
        <member name="T:j6.Core.ResourceKey">
            <summary>
             Encapsulates the various parameters that identify a resource
            </summary>
        </member>
        <member name="M:j6.Core.ResourceKey.#ctor">
            <summary>
            Default constructor for a resource key
            </summary>
        </member>
        <member name="M:j6.Core.ResourceKey.#ctor(System.String)">
            <summary>
            Creates a resource key from the concatenated key style
            </summary>
            <param name="resource">A string in the format of "context.name.property"</param>
        </member>
        <member name="M:j6.Core.ResourceKey.Equals(j6.Core.ResourceKey)">
            <see cref="M:j6.Core.PairBase`2.Equals(j6.Core.PairBase{`0,`1})"/>
        </member>
        <member name="M:j6.Core.ResourceKey.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:j6.Core.ResourceKey.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:j6.Core.ResourceKey.CompareTo(System.Object)">
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="M:j6.Core.ResourceKey.ToString(System.String,System.String,System.String)">
            <summary>
            Static method to concatenate a resource key into a single string
            </summary>
        </member>
        <member name="M:j6.Core.ResourceKey.TryCreate(System.String)">
            <summary>
            Tries to create a resource key from the concatenated key style,
            returns a null value if resource is not preoperly formatted. 
            </summary>
            <param name="resource">A string in the format of "context.name.property"</param>
            <returns>Instantiated ResourceKey or null</returns>
        </member>
        <member name="P:j6.Core.ResourceKey.Context">
            <summary>
             The context of the resource
            </summary>
        </member>
        <member name="P:j6.Core.ResourceKey.Name">
            <summary>
            The name of the resources
            </summary>
        </member>
        <member name="P:j6.Core.ResourceKey.Property">
            <summary>
            The property of the resource
            </summary>
        </member>
        <member name="T:j6.Core.ResourceQuery">
            <summary>
             Encapsulates the various parameters that can be used for
             a resource lookup.
            </summary>
        </member>
        <member name="M:j6.Core.ResourceQuery.#ctor">
            <summary>
            Default constructor allowing a single resource query
            </summary>
        </member>
        <member name="M:j6.Core.ResourceQuery.#ctor(j6.Core.ResourceKey)">
            <summary>
            Constructor allowing a single resource query for the provided key
            </summary>
        </member>
        <member name="P:j6.Core.ResourceQuery.Context">
            <summary>
             The context of the resource
            </summary>
        </member>
        <member name="P:j6.Core.ResourceQuery.Name">
            <summary>
            The name of the resources
            </summary>
        </member>
        <member name="P:j6.Core.ResourceQuery.Property">
            <summary>
            The property of the resource
            </summary>
        </member>
        <member name="T:j6.Core.ResourceQueries">
            <summary>
             Encapsulates the various parameters that can be used for
             multiple resource lookups.
            </summary>
        </member>
        <member name="M:j6.Core.ResourceQueries.#ctor">
            <summary>
            Default constructor allowing a query with multiple names
            </summary>
        </member>
        <member name="P:j6.Core.ResourceQueries.Keys">
            <summary>
            The keys to query
            </summary>
        </member>
        <member name="T:j6.Core.ResourceActions">
            <summary>
             Encapsulates the various parameters that can be used for
             multiple resource lookups and applications of the values.
            </summary>
             <remarks>The Actions data type is an enumerable of KeyValuePairs rather 
             than a Dictionary to allow duplicate keys with different actions</remarks>
        </member>
        <member name="M:j6.Core.ResourceActions.#ctor">
            <summary>
            Default constructor allowing a query with multiple actions
            </summary>
        </member>
        <member name="P:j6.Core.ResourceActions.Actions">
            <summary>
            The keys and actions to query
            </summary>
        </member>
        <member name="T:j6.Core.Role">
            <summary>
            Role component.
            </summary>
        </member>
        <member name="M:j6.Core.Role.Equals(j6.Core.Role)">
            <see cref="M:j6.Core.CodeComponent.Equals(j6.Core.CodeComponent)"/>
        </member>
        <member name="M:j6.Core.Role.Equals(System.Object)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:j6.Core.Role.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:j6.Core.Sequence">
            <summary>
            Contains the rules/details of a Sequence
            </summary>
        </member>
        <member name="M:j6.Core.Sequence.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Ensures that start value is less than the end value.
            </summary>
        </member>
        <member name="P:j6.Core.Sequence.StartValue">
            <summary>
            Minimum allowable number.
            </summary>
        </member>
        <member name="P:j6.Core.Sequence.EndValue">
            <summary>
            Maximum allowable number
            </summary>
        </member>
        <member name="P:j6.Core.Sequence.AllowSkip">
            <summary>
            Are gaps in the sequence permitted
            </summary>
        </member>
        <member name="T:j6.Core.CreateSequence">
            <summary>
            Used for creating sequences - includes a property for the current value.
            </summary>
        </member>
        <member name="M:j6.Core.CreateSequence.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:j6.Core.CreateSequence.#ctor(j6.Core.Sequence)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:j6.Core.CreateSequence.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Ensures that the CurrentValue is between StartValue and EndValue.
            </summary>
        </member>
        <member name="P:j6.Core.CreateSequence.CurrentValue">
            <summary>
            The current value of the sequence at the time the sequence object was constructed
            </summary>
        </member>
        <member name="T:j6.Core.StateProvince">
            <summary>
            Suffix component
            </summary>
        </member>
        <member name="M:j6.Core.StateProvince.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.StateProvince.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.StateProvince.Key">
            <see cref="P:j6.Core.IKey`1.Key"/>
        </member>
        <member name="P:j6.Core.StateProvince.Country">
            <summary>
            State province ISO Country
            </summary>
        </member>
        <member name="P:j6.Core.StateProvince.Code">
            <summary>
            Province code
            </summary>
        </member>
        <member name="P:j6.Core.StateProvince.Name">
            <summary>
            State province name
            </summary>
        </member>
        <member name="P:j6.Core.StateProvince.Identifier">
            <see cref="P:j6.Core.ComponentBase.Identifier"/>
        </member>
        <member name="T:j6.Core.StateProvinceKey">
            <summary>
            State Province Key
            </summary>
        </member>
        <member name="M:j6.Core.StateProvinceKey.HasValue">
            <summary>Determine if both paired strings have a value</summary>
        </member>
        <member name="P:j6.Core.StateProvinceKey.Country">
            <summary>First</summary>
        </member>
        <member name="P:j6.Core.StateProvinceKey.Code">
            <summary>Second</summary>
        </member>
        <member name="T:j6.Core.Suffix">
            <summary>
            Suffix component
            </summary>
        </member>
        <member name="T:j6.Core.Tag">
            <summary>
            Tag component.
            </summary>
        </member>
        <member name="T:j6.Core.TaxIdFormat">
            <summary>
            TaxIdFormat and example
            </summary>
        </member>
        <member name="P:j6.Core.TaxIdFormat.RegularExpression">
            <summary>
            FormatExpression
            </summary>
        </member>
        <member name="P:j6.Core.TaxIdFormat.Example">
            <summary>
            Example
            </summary>
        </member>
        <member name="T:j6.Core.Template">
            <summary>
            Templates for email and other purposes
            </summary>
        </member>
        <member name="P:j6.Core.Template.BodyResourceKey">
            <summary>
            The actual template itself
            </summary>
        </member>
        <member name="P:j6.Core.Template.SubjectResourceKey">
            <summary>
            The actual template itself
            </summary>
        </member>
        <member name="P:j6.Core.Template.Entity">
            <summary>
            Then entity key for this object
            </summary>
        </member>
        <member name="P:j6.Core.Template.Identifier">
            <see cref="P:j6.Core.CodeComponent.Identifier"/>
        </member>
        <member name="P:j6.Core.Template.TemplateCategoryCode">
            <summary>
            The parent Template Category that this template belongs to
            </summary>
        </member>
        <member name="P:j6.Core.Template.Publish">
            <summary>
            Bit field that indicates whether the template is published.
            </summary>
        </member>
        <member name="T:j6.Core.TemplateDetail">
            <summary>
            Templates for email and other purposes. Detail version. Contains extra properties like CanDelete
            </summary>
        </member>
        <member name="P:j6.Core.TemplateDetail.CanDelete">
            <summary>
            Can delete
            </summary>
        </member>
        <member name="T:j6.Core.TemplateCategory">
            <summary>
            Template Category for grouping templates
            </summary>
        </member>
        <member name="P:j6.Core.TemplateCategory.Identifier">
            <see cref="P:j6.Core.CodeComponent.Identifier"/>
        </member>
        <member name="P:j6.Core.TemplateCategory.CanDelete">
            <summary>
            Can delete
            </summary>
        </member>
        <member name="P:j6.Core.TemplateCategory.OptOut">
            <summary>
            Email Opt Out
            </summary>
        </member>
        <member name="T:j6.Core.Theme">
            <summary>
            Web Site Theme
            </summary>
        </member>
        <member name="M:j6.Core.Theme.#ctor">
            <summary>
            Default paramaterless constuctor implemented for serialization support.
            </summary>
        </member>
        <member name="M:j6.Core.Theme.#ctor(System.Int32,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construct a filled Theme
            </summary>
        </member>
        <member name="P:j6.Core.Theme.Enabled">
            <summary>
             Indicates if Theme is available for use 
            </summary>
        </member>
        <member name="P:j6.Core.Theme.Application">
            <summary>
             Application this theme can be used with
            </summary>
        </member>
        <member name="T:j6.Core.TriggerEvent">
            <summary>
            Trigger event component
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.TriggerEventType">
            <summary>
            Trigger event type code.
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.User">
            <summary>
            Trigger event type code.
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.EventDate">
            <summary>
            Event date.
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.Payload">
            <summary>
            Payload.
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.XmlPayload">
            <summary>
            work around for serialization payload object
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.ConversionHandle">
            <summary>
            Service broker conversion handle
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.Warnings">
            <summary>
            Warnings
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEvent.Results">
            <summary>
            What actions were taken as a result of this message?
            </summary>
        </member>
        <member name="T:j6.Core.TriggerEventCategory">
            <summary>
            TriggerEventCategory compoent
            </summary>
        </member>
        <member name="T:j6.Core.TriggerEventStatus">
            <summary>
            Trigger event status
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEventStatus.Event">
            <summary>
            Trigger event
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEventStatus.Exception">
            <summary>
            Exception if happen
            </summary>
        </member>
        <member name="T:j6.Core.TriggerEventType">
            <summary>
            A particular kind of trigger
            </summary>
        </member>
        <member name="M:j6.Core.TriggerEventType.Clone">
            <see cref="M:j6.Core.CodeComponent.Clone"/>
        </member>
        <member name="P:j6.Core.TriggerEventType.TriggerEventCategory">
            <summary>
            The category of the trigger event type, purely for 
            ease of administration
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEventType.ImplClassName">
            <summary>
            The class that implements the handler for this kind of event
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEventType.ImplAssembly">
            <summary>
            The assembly that contains the implementation class
            </summary>
        </member>
        <member name="P:j6.Core.TriggerEventType.CanDelete">
            <summary>
            Can delete
            </summary>
        </member>
        <member name="T:j6.Core.User">
            <summary>
            A user of the system.
            </summary>
        </member>
        <member name="M:j6.Core.User.#ctor">
            <summary>
            The account associated with this user
            </summary>
        </member>
        <member name="M:j6.Core.User.SetPassword(System.String,j6.Core.EncodingAlgorithm)">
            <summary>
            Encodes the given password and sets the password property to the encoded value
            </summary>
            <param name="clearText">The clear text password to encode</param>
            <param name="encoding">The encoding algorithm to use</param>
        </member>
        <member name="P:j6.Core.User.Account">
            <summary>
            Account Code associated to user.
            </summary>
        </member>
        <member name="P:j6.Core.User.Culture">
            <summary>
            The culture for this user
            </summary>
        </member>
        <member name="P:j6.Core.User.Active">
            <summary>
            Indicates this user is active
            </summary>
        </member>
        <member name="P:j6.Core.User.Password">
            <summary>
            The encoded password (using the PasswordEncoding Algorithm)
            </summary>
        </member>
        <member name="P:j6.Core.User.Hint">
            <summary>
            The hint for the password
            </summary>
        </member>
        <member name="P:j6.Core.User.MustChangePassword">
            <summary>
            The password must be changed at next login
            </summary>
        </member>
        <member name="P:j6.Core.User.ExpiredPassword">
            <summary>
            Expire the existing password
            </summary>
        </member>
        <member name="P:j6.Core.User.FailedPasswordLocked">
            <summary>
            true if the user is locked due to failed password attempts
            </summary>
        </member>
        <member name="P:j6.Core.User.AuthType">
            <summary>
            The authentication type for this user
            </summary>
        </member>
        <member name="P:j6.Core.User.PasswordEncoding">
            <summary>
            The EncodingAlgorithm used for the Password property
            </summary>
        </member>
        <member name="P:j6.Core.User.Countries">
            <summary>
            List of countries associated with this user.
            NOTE: This is a reflection of the countries associated with the user entity in the database.  
            It should *not* be used to determine what countries the user has access to interact with.
            Use CountryFlow.GetAllForUser for that.
            </summary>
        </member>
        <member name="T:j6.Core.AuthType">
            <summary>
            Enum of accepted authorization types.
            </summary>
        </member>
        <member name="T:j6.Core.UserDetail">
            <summary>
            User with detail information
            </summary>
        </member>
        <member name="M:j6.Core.UserDetail.#ctor">
            <summary>
            Public Constructor
            Defaults Countries to an empty list of strings for SetAdditionalComponents/SetAdditionalEntities
            </summary>
        </member>
        <member name="P:j6.Core.UserDetail.Identifier">
            <summary>
            use base identifier.
            </summary>
        </member>
        <member name="P:j6.Core.UserDetail.Roles">
            <summary>
            Comma separated list of roles
            </summary>
        </member>
        <member name="T:j6.Core.UserLoginToken">
            <summary>UserLoginToken</summary>
        </member>
        <member name="M:j6.Core.UserLoginToken.Clone">
            <see cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:j6.Core.UserLoginToken.Code">
            <summary>
            The code for this login token
            </summary>
        </member>
        <member name="P:j6.Core.UserLoginToken.User">
            <summary>
            The user associated with this login token
            </summary>
        </member>
        <member name="P:j6.Core.UserLoginToken.LastActivity">
            <summary>
            The last activity for this login token
            </summary>
        </member>
        <member name="T:j6.Core.OperationResult">
            <summary>
            OperationResult
            </summary>
        </member>
        <member name="M:j6.Core.OperationResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:j6.Core.OperationResult.#ctor(System.String,System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.OperationResult.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:j6.Core.OperationResult.#ctor(System.String,System.String,System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:j6.Core.OperationResult.Success">
            <summary>
            true if there is no error message
            </summary>
        </member>
        <member name="P:j6.Core.OperationResult.ErrorMessage">
            <summary>
            The error message (if any) for this operation
            </summary>
        </member>
        <member name="P:j6.Core.OperationResult.Code">
            <summary>
            The code for this operation
            </summary>
        </member>
        <member name="P:j6.Core.OperationResult.Operation">
            <summary>
            The operation being performed
            </summary>
        </member>
        <member name="T:j6.Core.WalletManager">
            <summary>
            Override to create a class containing the monetary values for a particular component
            </summary>
        </member>
        <member name="M:j6.Core.WalletManager.#ctor">
            <summary>
            Initializes the WalletManager with an empty PrimaryWallet.
            </summary>
        </member>
        <member name="M:j6.Core.WalletManager.Clear">
            <summary>
            Resets all Monetary Values to default
            </summary>
        </member>
        <member name="P:j6.Core.WalletManager.Currency">
            <summary>
            Currency of this wallet
            </summary>
        </member>
        <member name="P:j6.Core.WalletManager.DefaultCurrencyFormat">
            <summary>
            Default format of money objects in this wallet manager
            </summary>
        </member>
        <member name="F:j6.Core.PrimaryWallet._CalculatingCurrency">
            <summary>
            This avoids an infinite loop in some cases
            </summary>
        </member>
        <member name="M:j6.Core.PrimaryWallet.UpdateCurrencies">
            <summary>
            Updates currencies on existing Money values to match Currency property.
            </summary>
        </member>
        <member name="M:j6.Core.PrimaryWallet.Clear">
            <summary>
            Remove all entries
            </summary>
        </member>
        <member name="M:j6.Core.PrimaryWallet.CopyFrom(j6.Core.PrimaryWallet)">
            <summary>
            Copies values from another wallet
            </summary>
        </member>
        <member name="P:j6.Core.PrimaryWallet.Currency">
            <summary>
            The currency of the amounts
            </summary>
        </member>
        <member name="P:j6.Core.PrimaryWallet.Exchange">
            <summary>
            Always null. Setting value is ignored.
            </summary>
        </member>
        <member name="P:j6.Core.ILocalWallet.Exchange">
            <summary>
            Must set this on local wallets... this is the exchange which converts the values to local currency
            </summary>
        </member>
        <member name="P:j6.Core.LocalWallet.PrimaryWallet">
            <summary>
            Only set on a wallet meant to be the local currency.  This references the wallet which contains the primary currency.
            The primary currency is the "currency of record" for the object, which is stored in the database.
            </summary>
        </member>
        <member name="T:j6.Core.WarmupCache">
            <summary>
            Define warm up cache
            </summary>
        </member>
        <member name="P:j6.Core.WarmupCache.Name">
            <summary>
            The name of the cache
            </summary>
        </member>
        <member name="P:j6.Core.WarmupCache.Method">
            <summary>
            The name of the cache
            </summary>
        </member>
        <member name="P:j6.Core.WarmupCache.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="P:j6.Core.WarmupCache.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:j6.Core.IWarmupCacheFlow">
            <summary>
            IWarmupCacheFlow
            </summary>
        </member>
        <member name="M:j6.Core.IWarmupCacheFlow.GetAll">
            <summary>
            Get all warm up cache configured
            </summary>
        </member>
    </members>
</doc>
