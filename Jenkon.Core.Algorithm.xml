<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jenkon.Core.Algorithm</name>
    </assembly>
    <members>
        <member name="T:Jenkon.Core.Algorithm.Algorithm">
            <summary>
            A set of generic algorithms which can be applied to various
            data types.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Jenkon.Core.Algorithm.Algorithm.GetWithDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})" -->
        <member name="M:Jenkon.Core.Algorithm.Algorithm.Each``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            executes the predicate on each item in e where the item casts to type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the action for every item in the set.
            </summary>
            <typeparam name="T">The data type of each item in the set</typeparam>
            <param name="set">The set of items to iterate over</param>
            <param name="action">The action to perform</param>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.SplitAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits a list into sublists of the specified length.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a list, e.g. [[1,2], [3,4,5]] becomes [1,2,3,4,5].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.FilterByType``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns all the elements of the given list of T's whose real type is U (or a subclass).
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.Merge``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates a new dictionary that contains all of the keys and values of both dictionaries,
            with values of the second dictionary overriding those of the first.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.Merge(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates a new dictionary that contains all of the keys and values of both dictionaries,
            with values of the second dictionary overriding those of the first.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.Merge``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1,``1})">
            <summary>
            Creates a new dictionary that contains all of the keys and values of both dictionaries.
            In the case of a key that exists in both, the Resolver delegate is used to combine/choose
            the correct value.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.LuhnValidate(System.Int32[])">
            <summary>
             Implement the Luhn validation algorithm.  Reference: http://en.wikipedia.org/wiki/Luhn_algorithm
            </summary>
            <param name="digits">array of integers representing each digit in number</param>
            <returns>true if number passes the validation, otherwise false.</returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.LuhnValidate(System.String)">
            <summary>
             Helper for LuhnValidate.  Converts a string to an array of digits.
            </summary>
            <param name="number">string representing a number</param>
            <returns>false if string 'number' contains non-numeric characters, 
             otherwise the result of LuhnValidate(int[]) using this string converted to an int[]</returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.Bracket(System.String)">
            <summary>
            Wraps the string in square brackets.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.FormatInvariant(System.String,System.Object[])">
            <summary>
            Formats the given string with the parameters, using the invariant culture.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.EqualsInvariantIC(System.String,System.String)">
            <summary>
            Checks for equality with the InvariantCultureIgnoreCase string comparison.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Algorithm.SubstituteParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Returns null if s is null, otherwise returns s with $-substitutions and :{} formatting.
            </summary>
            <param name="s">A string with $-prefixed substitution points and optional :{} formatting</param>
            <param name="parameters">The replacement values to substitute</param>
            <param name="parenthesize">If true, then substitutions will be wrapped in parenthesis.</param>
            <returns></returns>
        </member>
        <member name="T:Jenkon.Core.Algorithm.GeneratedAttribute">
            <summary>
            A marker for generated code
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.PureAttribute">
            <summary>
            A marker for pure (side-effect free) methods
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.ImmutableAttribute">
            <summary>
            A marker for immutable classes
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.DisposableList">
            <summary>
            A list of disposable items, which is itself disposable.
            When disposed, it disposes its contents (in order).
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.DisposableList.DisposeExceptions">
            <summary>
            Exceptions that occurred during Dispose(). Dispose() should
            not throw exceptions, so DisposableList traps them and keeps
            a list of them in case the caller is interested.
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.Maybe`1">
            <summary>
            Nullable types have too many problems in .Net 2.0, so
            we need real Maybe types a la Haskell.
            </summary>
        </member>
        <member name="F:Jenkon.Core.Algorithm.Maybe`1.Nothing">
            <summary>Empty value</summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Maybe`1.#ctor(`0)">
            <summary>
            Constructor to use when a value is present
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Maybe`1.#ctor">
            <summary>
            Constructor to use when a value is not present.
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.Maybe`1.Value">
            <summary>
            Returns the value, if provided. Otherwise, throws an exception.
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.Maybe`1.HasValue">
            <summary>
            Does the Maybe represent a value, or no value?
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.IDirectedGraph`1">
            <summary>
            Generic graphs
            </summary>
            <typeparam name="T">The type of graph elements</typeparam>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetVertices">
            <summary>
            Return all vertices in the graph
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetEdges">
            <summary>
            Return all edges in the graph
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetOutboundEdges(`0)">
            <summary>
            Return all outbound edges from the given vertex
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetInboundEdges(`0)">
            <summary>
            Return all inbound edges from the given vertex
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.AddVertex(`0)">
            <summary>
            Adds a vertex
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.RemoveEdge(`0,`0)">
            <summary>
            Removes an edge
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.AddEdge(`0,`0)">
            <summary>
            Add an edge
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.PathTo(`0,`0)">
            <summary>
            Returns a path from the source to the target, if one exists,
            on null if no such path exists
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.DepthFirstSearch(System.Predicate{`0})">
            <summary>
            Does a depth-first search for a node that matches the predicate.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.TopologicalSort">
            <summary>
            Returns the vertices of the graph, sorted in topological order, meaning that
            each vertex appears earlier in the list than any vertex to which it points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetRoots">
            <summary>
            Returns the vertices that have no inbound edges.
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.GraphSearchResult`1">
            <summary>
            Information returned from searches of a graph.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.GraphSearchResult`1.#ctor(`0,`0)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.GraphSearchResult`1.Vertex">
            <summary>
            The vertex whose search this is
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.GraphSearchResult`1.Predecessor">
            <summary>
            The current vertex's predecessor
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.GraphSearchResult`1.Discovered">
            <summary>
            The time at which the search discovered this vertex
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.GraphSearchResult`1.Finished">
            <summary>
            The time at which this vertex was fully explored
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.GraphSearchResult`1.Color">
            <summary>
            The current state of the exploration of this vertex. 
            WHITE - unexplored, GRAY - currently being explored, 
            BLACK - fully explored
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.GraphSearchResult`1.Level">
            <summary>
            The 0-based level of the node (nodes with no incoming connections have level 0,
            the nodes they're connected to have level 1, etc.)
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.GraphColor">
            <summary>
            The current state of the exploration of a vertex. 
            WHITE - unexplored, GRAY - currently being explored, 
            BLACK - fully explored
            </summary>
        </member>
        <member name="F:Jenkon.Core.Algorithm.GraphColor.WHITE">
            <summary>
            Unexplored
            </summary>
        </member>
        <member name="F:Jenkon.Core.Algorithm.GraphColor.GRAY">
            <summary>
            Partially explored
            </summary>
        </member>
        <member name="F:Jenkon.Core.Algorithm.GraphColor.BLACK">
            <summary>
            Fully explored
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.DirectedGraph`1">
            <summary>
            Provides default implementations of some common graph methods
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.GetVertices">
            <summary>
            Return all vertices in the graph
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.GetEdges">
            <summary>
            Return all edges in the graph
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.GetOutboundEdges(`0)">
            <summary>
            Return all outbound edges from the given vertex
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.GetInboundEdges(`0)">
            <summary>
            Return all inbound edges from the given vertex
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.AddVertex(`0)">
            <summary>
            Adds a vertex
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.RemoveEdge(`0,`0)">
            <summary>
            Removes an edge
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.AddEdge(`0,`0)">
            <summary>
            Add an edge
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.PathTo(`0,`0)">
            <summary>
            Returns a path from the source to the target, if one exists,
            on null if no such path exists
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.GetRoots">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetRoots"/>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.DepthFirstSearch(System.Predicate{`0})">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.DepthFirstSearch(System.Predicate{`0})"/>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.GetLayers">
            <summary>
            Returns the vertices of the graph, sorted in topological order, meaning that
            each vertex appears earlier in the list than any vertex to which it points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.TopologicalSort">
            <summary>
            Returns the vertices of the graph, sorted in topological order, meaning that
            each vertex appears earlier in the list than any vertex to which it points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.DirectedGraph`1.HasCycles">
            <summary>
            Returns true if the graph has cycles, false otherwise.
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.AdjacencyListGraph`1">
            <summary>
            An implementation that uses adjacency lists
            </summary>
            <typeparam name="T">The node type</typeparam>
        </member>
        <member name="M:Jenkon.Core.Algorithm.AdjacencyListGraph`1.GetVertices">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetVertices"/>
        </member>
        <member name="M:Jenkon.Core.Algorithm.AdjacencyListGraph`1.GetEdges">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetEdges"/>
        </member>
        <member name="M:Jenkon.Core.Algorithm.AdjacencyListGraph`1.GetOutboundEdges(`0)">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.GetOutboundEdges(`0)"/>
        </member>
        <member name="M:Jenkon.Core.Algorithm.AdjacencyListGraph`1.GetInboundEdges(`0)">
            <summary>
            Return all inbound edges from the given vertex
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.AdjacencyListGraph`1.AddVertex(`0)">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.AddVertex(`0)"/>
        </member>
        <member name="M:Jenkon.Core.Algorithm.AdjacencyListGraph`1.RemoveEdge(`0,`0)">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.RemoveEdge(`0,`0)"/>
        </member>
        <member name="M:Jenkon.Core.Algorithm.AdjacencyListGraph`1.AddEdge(`0,`0)">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.AddEdge(`0,`0)"/>
        </member>
        <member name="M:Jenkon.Core.Algorithm.AdjacencyListGraph`1.PathTo(`0,`0)">
            <see cref="M:Jenkon.Core.Algorithm.IDirectedGraph`1.PathTo(`0,`0)"/>
        </member>
        <member name="T:Jenkon.Core.Algorithm.Arrow`1">
            <summary>
            Directed edges between two nodes
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Arrow`1.#ctor(`0,`0)">
            <summary>
            Public constructor
            </summary>
            <param name="domain">The source of the arrow</param>
            <param name="codomain">The target of the arrow</param>
        </member>
        <member name="P:Jenkon.Core.Algorithm.Arrow`1.Domain">
            <summary>
            The source of the arrow
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.Arrow`1.Codomain">
            <summary>
            The target of the arrow
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type[])">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseTypes">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.Linq">
            <summary>
            Extension methods and helpers for Linq and functional programming in general.
            Parts originally from http://www.xoltar.org/cms/node/17, used with permission.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Linq.Curry``2(System.Func{``0,``1},``0)">
            <summary>
            Returns a function that takes no arguments
            and returns the return value of func(t). 
            </summary>
            <typeparam name="T">The type of the sole argument to func</typeparam>
            <typeparam name="T2">The return type of func</typeparam>
            <param name="func">The function to partially apply</param>
            <param name="t">The argument to which func should be applied</param>
            <returns>A function that takes 0 arguments and returns the same results that
            func(t) would have returned</returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Linq.Curry``3(System.Func{``0,``1,``2},``0)">
            <summary>
            Returnings function that takes 1 argument (call it "u")
            and returns the return value of func(t, u).
            </summary>
            <typeparam name="T">The type of the argument to func</typeparam>
            <typeparam name="T3">The return type of func</typeparam>
            <param name="func">The function to partially apply</param>
            <param name="t">The argument to which func should be applied</param>
            <returns>A function that takes 1 argument and returns the same results that
            func(t, u) would have returned</returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Linq.Curry``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>
            Returns a function that takes 2 arguments 
            (call them "u", "v") and returns the return value of func(t, u, v).
            </summary>
            <typeparam name="T">The type of the argument to func</typeparam>
            <typeparam name="T4">The return type of func</typeparam>
            <param name="func">The function to partially apply</param>
            <param name="t">The argument to which func should be applied</param>
            <returns>A function that takes 2 arguments and returns the same results that
            func(t, u, v) would have returned</returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Linq.Curry``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>
            Returns a function that takes 3 arguments 
            (call them "u", "v", "w") and returns the return value of func(t, u, v, w).
            </summary>
            <typeparam name="T">The type of the argument to func</typeparam>
            <typeparam name="T5">The return type of func</typeparam>
            <param name="func">The function to partially apply</param>
            <param name="t">The argument to which func should be applied</param>
            <returns>A function that takes 3 arguments and returns the same results that
            func(t, u, v, w) would have returned</returns>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Linq.ZipWith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            ZipWith applies a function f to elements of two enumerations, in pairs. The enumeration
            stops whenever either of the source enumerations stop. 
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Linq.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Zip takes two enumerables and returns an enumerable of Pairs, with the First element
            from the first enumerable, and the Second element from the second enumerable.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Linq.Compose``3(System.Func{``1,``2},System.Func{``0,``1})">
            <summary>
            Function composition. Returns a function that takes an argument, passes it
            to the "inner" function, passes that result to "outer", and returns the result.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Linq.Pipeline``1(System.Collections.Generic.IEnumerable{System.Func{``0,``0}})">
            <summary>
            Returns a function whose effect is the same as that of calling each
            function in the list with the results of the previous function in the list.
            The first function is called with the passed-in parameter.
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.TimeoutLock">
            <summary>
            Provides additional locking services
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.TimeoutLock.#ctor(System.Object,System.TimeSpan)">
            <summary>
            Public constructor.
            </summary>
            <param name="monitor">The object to lock</param>
            <param name="timeout">The length of time to wait 
            if the object cannot be immediately locked.</param>
        </member>
        <member name="M:Jenkon.Core.Algorithm.TimeoutLock.Dispose">
            <summary>
            Release the lock
            </summary>
        </member>
        <member name="T:Jenkon.Core.Algorithm.Pair`2">
            <summary>
            Holds a pair of items.
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Pair`2.#ctor(`0,`1)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Pair`2.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Pair`2.Equals(Jenkon.Core.Algorithm.Pair{`0,`1})">
            <summary>
            Two pairs are equal if their contents are equal
            </summary>
        </member>
        <member name="M:Jenkon.Core.Algorithm.Pair`2.Equals(System.Object)">
            <summary>
            Two pairs are equal if their contents are equal
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.Pair`2.First">
            <summary>
            The first item of the pair.
            </summary>
        </member>
        <member name="P:Jenkon.Core.Algorithm.Pair`2.Second">
            <summary>
            The second item of the pair.
            </summary>
        </member>
    </members>
</doc>
